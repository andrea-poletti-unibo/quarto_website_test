[
  {
    "objectID": "visualizzazioni.html",
    "href": "visualizzazioni.html",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Quarto eccelle nella creazione di visualizzazioni che combinano estetica, funzionalità e interattività. In questa sezione esploreremo diverse tecniche di visualizzazione che dimostrano la versatilità della piattaforma.\n\n\n\n\nCode\n# Carica librerie per visualizzazioni avanzate\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis)\nlibrary(DT)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyr)\nlibrary(tibble)\n\n# Patchwork per grafici compositi (se disponibile)\nif(require(patchwork, quietly = TRUE)) {\n  use_patchwork &lt;- TRUE\n} else {\n  use_patchwork &lt;- FALSE\n  cat(\"Nota: patchwork non disponibile, useremo layout alternativi\\n\")\n}\n\n# ggridges per ridge plots (se disponibile)\nif(require(ggridges, quietly = TRUE)) {\n  use_ridges &lt;- TRUE\n} else {\n  use_ridges &lt;- FALSE\n  cat(\"Nota: ggridges non disponibile, useremo grafici alternativi\\n\")\n}\n\n# Tema personalizzato\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray60\"),\n    panel.grid.minor = element_blank(),\n    legend.position = \"bottom\"\n  )\n\ntheme_set(custom_theme)\n\n# Prepara i dati\ndata(\"mtcars\")\nmtcars_viz &lt;- mtcars %&gt;%\n  mutate(\n    car_name = rownames(mtcars),\n    transmission = factor(ifelse(am == 1, \"Manuale\", \"Automatico\")),\n    cylinders = factor(cyl),\n    efficiency_class = case_when(\n      mpg &gt;= 25 ~ \"Alta\",\n      mpg &gt;= 20 ~ \"Media\",\n      mpg &gt;= 15 ~ \"Bassa\",\n      TRUE ~ \"Molto Bassa\"\n    ),\n    efficiency_class = factor(efficiency_class, \n                             levels = c(\"Molto Bassa\", \"Bassa\", \"Media\", \"Alta\"))\n  )\n\n\n\n\n\n\n\n\n\nCode\n# Calcola correlazioni\ncor_matrix &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb) %&gt;%\n  cor()\n\n# Converti in formato long per ggplot\ncor_long &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\")\n\n# Ordina le variabili con clustering\nhc &lt;- hclust(dist(cor_matrix))\nvar_order &lt;- rownames(cor_matrix)[hc$order]\n\ncor_long$var1 &lt;- factor(cor_long$var1, levels = var_order)\ncor_long$var2 &lt;- factor(cor_long$var2, levels = var_order)\n\n# Crea heatmap\nggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient2(\n    low = \"#B2182B\", mid = \"white\", high = \"#2166AC\",\n    midpoint = 0, limit = c(-1, 1), space = \"Lab\",\n    name = \"Correlazione\"\n  ) +\n  geom_text(aes(label = round(correlation, 2)), size = 3, color = \"black\") +\n  labs(title = \"Matrice di Correlazione delle Variabili del Dataset mtcars\",\n       subtitle = \"Variabili ordinate tramite clustering gerarchico\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.title = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nHeatmap delle correlazioni con clustering gerarchico\n\n\n\n\n\n\n\n\n\nCode\nif(use_ridges) {\n  # Se ggridges è disponibile\n  ggplot(mtcars_viz, aes(x = mpg, y = cylinders, fill = cylinders)) +\n    geom_density_ridges(alpha = 0.7, scale = 2) +\n    scale_fill_viridis_d() +\n    labs(title = \"Distribuzione del Consumo per Numero di Cilindri\",\n         subtitle = \"Grafici a ridge per visualizzare distribuzioni sovrapposte\",\n         x = \"Miglia per Gallone (MPG)\",\n         y = \"Numero di Cilindri\") +\n    theme(legend.position = \"none\")\n} else {\n  # Alternativa con facet_wrap\n  ggplot(mtcars_viz, aes(x = mpg, fill = cylinders)) +\n    geom_density(alpha = 0.7) +\n    facet_wrap(~cylinders, ncol = 1, scales = \"free_y\") +\n    scale_fill_viridis_d() +\n    labs(title = \"Distribuzione del Consumo per Numero di Cilindri\",\n         subtitle = \"Density plots separati per ogni configurazione\",\n         x = \"Miglia per Gallone (MPG)\",\n         y = \"Densità\") +\n    theme(legend.position = \"none\")\n}\n\n\nPicking joint bandwidth of 1.38\n\n\n\n\n\nDistribuzione del consumo per numero di cilindri\n\n\n\n\n\n\n\n\n\nCode\n# Grafico 1: Scatter plot\np1 &lt;- ggplot(mtcars_viz, aes(x = wt, y = mpg, color = transmission)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_viridis_d(end = 0.8) +\n  labs(title = \"A) Peso vs Consumo\", x = \"Peso\", y = \"MPG\")\n\n# Grafico 2: Boxplot\np2 &lt;- ggplot(mtcars_viz, aes(x = cylinders, y = hp, fill = cylinders)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_viridis_d() +\n  labs(title = \"B) Potenza per Cilindri\", x = \"Cilindri\", y = \"HP\") +\n  theme(legend.position = \"none\")\n\n# Grafico 3: Barplot\np3 &lt;- mtcars_viz %&gt;%\n  count(efficiency_class, transmission) %&gt;%\n  ggplot(aes(x = efficiency_class, y = n, fill = transmission)) +\n  geom_col(position = \"dodge\", alpha = 0.8) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"C) Efficienza per Trasmissione\", x = \"Classe Efficienza\", y = \"Conteggio\")\n\n# Grafico 4: Density plot\np4 &lt;- ggplot(mtcars_viz, aes(x = qsec, fill = transmission)) +\n  geom_density(alpha = 0.6) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set1\") +\n  labs(title = \"D) Distribuzione Tempi 1/4 Miglio\", x = \"Secondi\", y = \"Densità\")\n\nif(use_patchwork) {\n  # Se patchwork è disponibile\n  (p1 + p2) / (p3 + p4) +\n    plot_annotation(\n      title = \"Dashboard Esplorativa del Dataset mtcars\",\n      subtitle = \"Combinazione di diverse visualizzazioni per analisi multidimensionale\",\n      theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n    )\n} else {\n  # Layout alternativo con grid base R\n  print(p1)\n  print(p2)\n  print(p3)\n  print(p4)\n}\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nDashboard di grafici compositi\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Crea scatter plot 3D interattivo\np_3d &lt;- plot_ly(\n  data = mtcars_viz,\n  x = ~wt, y = ~hp, z = ~mpg,\n  color = ~transmission,\n  colors = c(\"red\", \"blue\"),\n  text = ~paste(\"Auto:\", car_name,\n                \"&lt;br&gt;Peso:\", wt,\n                \"&lt;br&gt;Potenza:\", hp,\n                \"&lt;br&gt;MPG:\", mpg,\n                \"&lt;br&gt;Cilindri:\", cyl),\n  hovertemplate = \"%{text}&lt;extra&gt;&lt;/extra&gt;\",\n  type = \"scatter3d\",\n  mode = \"markers\",\n  marker = list(size = 5, opacity = 0.8)\n) %&gt;%\n  layout(\n    title = \"Relazione 3D: Peso, Potenza e Consumo\",\n    scene = list(\n      xaxis = list(title = \"Peso (1000 lbs)\"),\n      yaxis = list(title = \"Potenza (HP)\"),\n      zaxis = list(title = \"MPG\")\n    )\n  )\n\np_3d\n\n\n\n\nScatter plot interattivo 3D\n\n\n\n\n\n\n\nCode\n# Prepara dati aggregati\nsummary_data &lt;- mtcars_viz %&gt;%\n  group_by(cylinders, transmission) %&gt;%\n  summarise(\n    avg_mpg = mean(mpg),\n    avg_hp = mean(hp),\n    count = n(),\n    .groups = \"drop\"\n  )\n\n# Crea grafico a barre interattivo\np_bar &lt;- plot_ly(\n  data = summary_data,\n  x = ~cylinders,\n  y = ~avg_mpg,\n  color = ~transmission,\n  type = \"bar\",\n  text = ~paste(\"Conteggio:\", count),\n  hovertemplate = \"Cilindri: %{x}&lt;br&gt;MPG medio: %{y:.1f}&lt;br&gt;%{text}&lt;br&gt;Trasmissione: %{fullData.name}&lt;extra&gt;&lt;/extra&gt;\"\n) %&gt;%\n  layout(\n    title = \"Consumo Medio per Configurazione\",\n    xaxis = list(title = \"Numero di Cilindri\"),\n    yaxis = list(title = \"MPG Medio\"),\n    barmode = \"group\"\n  )\n\np_bar\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n\n\n\nGrafico a barre interattivo con drill-down\n\n\n\n\n\n\n\nCode\n# Prepara dati per visualizzazione correlazioni forti\ncor_matrix &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec) %&gt;%\n  cor()\n\n# Trova correlazioni forti (|r| &gt; 0.6)\ncor_long &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\") %&gt;%\n  filter(abs(correlation) &gt; 0.6, var1 != var2)\n\n# Visualizza solo correlazioni forti\nggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n  geom_tile(color = \"white\", size = 1) +\n  scale_fill_gradient2(\n    low = \"#B2182B\", mid = \"white\", high = \"#2166AC\",\n    midpoint = 0, limit = c(-1, 1),\n    name = \"Correlazione\"\n  ) +\n  geom_text(aes(label = round(correlation, 2)), size = 4, fontface = \"bold\") +\n  labs(title = \"Mappa delle Correlazioni Forti (|r| &gt; 0.6)\",\n       subtitle = \"Solo le correlazioni più significative\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.title = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nHeatmap delle correlazioni forti (alternativa a network)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Simula dati per analisi marca (estrai marca dal nome)\nmtcars_brands &lt;- mtcars_viz %&gt;%\n  mutate(\n    brand = case_when(\n      grepl(\"Merc\", car_name) ~ \"Mercedes\",\n      grepl(\"Toyota|Corolla\", car_name) ~ \"Toyota\", \n      grepl(\"Mazda\", car_name) ~ \"Mazda\",\n      grepl(\"Datsun\", car_name) ~ \"Datsun\",\n      grepl(\"Hornet|Valiant\", car_name) ~ \"Chrysler\",\n      grepl(\"Duster|Challenger\", car_name) ~ \"Plymouth\",\n      grepl(\"Camaro|Corvette\", car_name) ~ \"Chevrolet\",\n      grepl(\"Pantera\", car_name) ~ \"De Tomaso\",\n      grepl(\"Ferrari\", car_name) ~ \"Ferrari\",\n      grepl(\"Maserati\", car_name) ~ \"Maserati\",\n      grepl(\"Volvo\", car_name) ~ \"Volvo\",\n      TRUE ~ \"Altri\"\n    )\n  ) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(\n    total_hp = sum(hp),\n    count = n(),\n    avg_mpg = round(mean(mpg), 1),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(total_hp))\n\n# Grafico a barre della potenza totale\nggplot(mtcars_brands, aes(x = reorder(brand, total_hp), y = total_hp, fill = avg_mpg)) +\n  geom_col(alpha = 0.8) +\n  scale_fill_viridis_c(name = \"MPG\\nMedio\") +\n  coord_flip() +\n  labs(title = \"Potenza Totale per Marca\",\n       subtitle = \"Colore rappresenta l'efficienza media (MPG)\",\n       x = \"Marca\", y = \"Potenza Totale (HP)\") +\n  theme_minimal()\n\n\n\n\n\nAnalisi della potenza per marca (simulata)\n\n\n\n\n\n\n\n\n\nCode\n# Crea subplot con plotly\nfig1 &lt;- plot_ly(mtcars_viz, x = ~wt, y = ~mpg, color = ~transmission,\n                type = \"scatter\", mode = \"markers\",\n                name = \"Scatter\") %&gt;%\n  layout(title = \"Peso vs MPG\")\n\nfig2 &lt;- plot_ly(mtcars_viz, x = ~cylinders, y = ~hp, \n                type = \"box\", name = \"Boxplot\") %&gt;%\n  layout(title = \"HP per Cilindri\")\n\nfig3 &lt;- mtcars_viz %&gt;%\n  count(efficiency_class) %&gt;%\n  plot_ly(x = ~efficiency_class, y = ~n, type = \"bar\",\n          marker = list(color = \"steelblue\")) %&gt;%\n  layout(title = \"Distribuzione Efficienza\")\n\nfig4 &lt;- plot_ly(mtcars_viz, x = ~qsec, type = \"histogram\",\n                nbinsx = 10, marker = list(color = \"lightcoral\")) %&gt;%\n  layout(title = \"Distribuzione Tempo 1/4 Miglio\")\n\n# Combina in subplot\nsubplot(fig1, fig2, fig3, fig4, \n        nrows = 2, titleX = TRUE, titleY = TRUE) %&gt;%\n  layout(title = \"Dashboard Interattiva Completa\")\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n\n\n\nDashboard interattiva multifunzione\n\n\n\n\n\n\n\n\nCode\n# Crea tabella con formattazione avanzata\nmtcars_viz %&gt;%\n  select(car_name, mpg, hp, wt, cylinders, transmission, efficiency_class) %&gt;%\n  datatable(\n    caption = \"Dataset Interattivo con Formattazione Avanzata\",\n    extensions = c('Buttons', 'ColReorder'),\n    options = list(\n      dom = 'Bfrtip',\n      buttons = c('copy', 'csv', 'excel', 'pdf'),\n      pageLength = 10,\n      colReorder = TRUE,\n      columnDefs = list(\n        list(className = 'dt-center', targets = c(1,2,3,4,5,6))\n      )\n    ),\n    filter = \"top\",\n    rownames = FALSE\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1) %&gt;%\n  formatStyle(\n    \"efficiency_class\",\n    backgroundColor = styleEqual(\n      c(\"Molto Bassa\", \"Bassa\", \"Media\", \"Alta\"),\n      c(\"#d73027\", \"#fc8d59\", \"#fee08b\", \"#91cf60\")\n    )\n  ) %&gt;%\n  formatStyle(\n    \"mpg\",\n    background = styleColorBar(mtcars_viz$mpg, \"lightblue\"),\n    backgroundSize = \"100% 90%\",\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\"\n  )\n\n\n\n\n\n\n\n\n\n\nQuarto offre eccezionali capacità per:\n\nIntegrazione Multi-libreria: Combina ggplot2, plotly, leaflet e altre librerie seamlessly\nInterattività Nativa: Grafici interattivi senza configurazione complessa\n\nLayout Flessibili: Patchwork e subplot per dashboard complete\nEsportabilità: Tutti i grafici funzionano in HTML, PDF e altri formati\nPersonalizzazione: Controllo completo su temi e stili\n\nLa forza di Quarto sta nel rendere accessibili visualizzazioni complesse mantenendo la riproducibilità del codice."
  },
  {
    "objectID": "visualizzazioni.html#preparazione",
    "href": "visualizzazioni.html#preparazione",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Code\n# Carica librerie per visualizzazioni avanzate\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(dplyr)\nlibrary(viridis)\nlibrary(DT)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyr)\nlibrary(tibble)\n\n# Patchwork per grafici compositi (se disponibile)\nif(require(patchwork, quietly = TRUE)) {\n  use_patchwork &lt;- TRUE\n} else {\n  use_patchwork &lt;- FALSE\n  cat(\"Nota: patchwork non disponibile, useremo layout alternativi\\n\")\n}\n\n# ggridges per ridge plots (se disponibile)\nif(require(ggridges, quietly = TRUE)) {\n  use_ridges &lt;- TRUE\n} else {\n  use_ridges &lt;- FALSE\n  cat(\"Nota: ggridges non disponibile, useremo grafici alternativi\\n\")\n}\n\n# Tema personalizzato\ncustom_theme &lt;- theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12, color = \"gray60\"),\n    panel.grid.minor = element_blank(),\n    legend.position = \"bottom\"\n  )\n\ntheme_set(custom_theme)\n\n# Prepara i dati\ndata(\"mtcars\")\nmtcars_viz &lt;- mtcars %&gt;%\n  mutate(\n    car_name = rownames(mtcars),\n    transmission = factor(ifelse(am == 1, \"Manuale\", \"Automatico\")),\n    cylinders = factor(cyl),\n    efficiency_class = case_when(\n      mpg &gt;= 25 ~ \"Alta\",\n      mpg &gt;= 20 ~ \"Media\",\n      mpg &gt;= 15 ~ \"Bassa\",\n      TRUE ~ \"Molto Bassa\"\n    ),\n    efficiency_class = factor(efficiency_class, \n                             levels = c(\"Molto Bassa\", \"Bassa\", \"Media\", \"Alta\"))\n  )"
  },
  {
    "objectID": "visualizzazioni.html#grafici-statici-avanzati",
    "href": "visualizzazioni.html#grafici-statici-avanzati",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Code\n# Calcola correlazioni\ncor_matrix &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb) %&gt;%\n  cor()\n\n# Converti in formato long per ggplot\ncor_long &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\")\n\n# Ordina le variabili con clustering\nhc &lt;- hclust(dist(cor_matrix))\nvar_order &lt;- rownames(cor_matrix)[hc$order]\n\ncor_long$var1 &lt;- factor(cor_long$var1, levels = var_order)\ncor_long$var2 &lt;- factor(cor_long$var2, levels = var_order)\n\n# Crea heatmap\nggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  scale_fill_gradient2(\n    low = \"#B2182B\", mid = \"white\", high = \"#2166AC\",\n    midpoint = 0, limit = c(-1, 1), space = \"Lab\",\n    name = \"Correlazione\"\n  ) +\n  geom_text(aes(label = round(correlation, 2)), size = 3, color = \"black\") +\n  labs(title = \"Matrice di Correlazione delle Variabili del Dataset mtcars\",\n       subtitle = \"Variabili ordinate tramite clustering gerarchico\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.title = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nHeatmap delle correlazioni con clustering gerarchico\n\n\n\n\n\n\n\n\n\nCode\nif(use_ridges) {\n  # Se ggridges è disponibile\n  ggplot(mtcars_viz, aes(x = mpg, y = cylinders, fill = cylinders)) +\n    geom_density_ridges(alpha = 0.7, scale = 2) +\n    scale_fill_viridis_d() +\n    labs(title = \"Distribuzione del Consumo per Numero di Cilindri\",\n         subtitle = \"Grafici a ridge per visualizzare distribuzioni sovrapposte\",\n         x = \"Miglia per Gallone (MPG)\",\n         y = \"Numero di Cilindri\") +\n    theme(legend.position = \"none\")\n} else {\n  # Alternativa con facet_wrap\n  ggplot(mtcars_viz, aes(x = mpg, fill = cylinders)) +\n    geom_density(alpha = 0.7) +\n    facet_wrap(~cylinders, ncol = 1, scales = \"free_y\") +\n    scale_fill_viridis_d() +\n    labs(title = \"Distribuzione del Consumo per Numero di Cilindri\",\n         subtitle = \"Density plots separati per ogni configurazione\",\n         x = \"Miglia per Gallone (MPG)\",\n         y = \"Densità\") +\n    theme(legend.position = \"none\")\n}\n\n\nPicking joint bandwidth of 1.38\n\n\n\n\n\nDistribuzione del consumo per numero di cilindri\n\n\n\n\n\n\n\n\n\nCode\n# Grafico 1: Scatter plot\np1 &lt;- ggplot(mtcars_viz, aes(x = wt, y = mpg, color = transmission)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_viridis_d(end = 0.8) +\n  labs(title = \"A) Peso vs Consumo\", x = \"Peso\", y = \"MPG\")\n\n# Grafico 2: Boxplot\np2 &lt;- ggplot(mtcars_viz, aes(x = cylinders, y = hp, fill = cylinders)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_viridis_d() +\n  labs(title = \"B) Potenza per Cilindri\", x = \"Cilindri\", y = \"HP\") +\n  theme(legend.position = \"none\")\n\n# Grafico 3: Barplot\np3 &lt;- mtcars_viz %&gt;%\n  count(efficiency_class, transmission) %&gt;%\n  ggplot(aes(x = efficiency_class, y = n, fill = transmission)) +\n  geom_col(position = \"dodge\", alpha = 0.8) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"C) Efficienza per Trasmissione\", x = \"Classe Efficienza\", y = \"Conteggio\")\n\n# Grafico 4: Density plot\np4 &lt;- ggplot(mtcars_viz, aes(x = qsec, fill = transmission)) +\n  geom_density(alpha = 0.6) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set1\") +\n  labs(title = \"D) Distribuzione Tempi 1/4 Miglio\", x = \"Secondi\", y = \"Densità\")\n\nif(use_patchwork) {\n  # Se patchwork è disponibile\n  (p1 + p2) / (p3 + p4) +\n    plot_annotation(\n      title = \"Dashboard Esplorativa del Dataset mtcars\",\n      subtitle = \"Combinazione di diverse visualizzazioni per analisi multidimensionale\",\n      theme = theme(plot.title = element_text(size = 16, face = \"bold\"))\n    )\n} else {\n  # Layout alternativo con grid base R\n  print(p1)\n  print(p2)\n  print(p3)\n  print(p4)\n}\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nDashboard di grafici compositi"
  },
  {
    "objectID": "visualizzazioni.html#visualizzazioni-interattive",
    "href": "visualizzazioni.html#visualizzazioni-interattive",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Code\n# Crea scatter plot 3D interattivo\np_3d &lt;- plot_ly(\n  data = mtcars_viz,\n  x = ~wt, y = ~hp, z = ~mpg,\n  color = ~transmission,\n  colors = c(\"red\", \"blue\"),\n  text = ~paste(\"Auto:\", car_name,\n                \"&lt;br&gt;Peso:\", wt,\n                \"&lt;br&gt;Potenza:\", hp,\n                \"&lt;br&gt;MPG:\", mpg,\n                \"&lt;br&gt;Cilindri:\", cyl),\n  hovertemplate = \"%{text}&lt;extra&gt;&lt;/extra&gt;\",\n  type = \"scatter3d\",\n  mode = \"markers\",\n  marker = list(size = 5, opacity = 0.8)\n) %&gt;%\n  layout(\n    title = \"Relazione 3D: Peso, Potenza e Consumo\",\n    scene = list(\n      xaxis = list(title = \"Peso (1000 lbs)\"),\n      yaxis = list(title = \"Potenza (HP)\"),\n      zaxis = list(title = \"MPG\")\n    )\n  )\n\np_3d\n\n\n\n\nScatter plot interattivo 3D\n\n\n\n\n\n\n\nCode\n# Prepara dati aggregati\nsummary_data &lt;- mtcars_viz %&gt;%\n  group_by(cylinders, transmission) %&gt;%\n  summarise(\n    avg_mpg = mean(mpg),\n    avg_hp = mean(hp),\n    count = n(),\n    .groups = \"drop\"\n  )\n\n# Crea grafico a barre interattivo\np_bar &lt;- plot_ly(\n  data = summary_data,\n  x = ~cylinders,\n  y = ~avg_mpg,\n  color = ~transmission,\n  type = \"bar\",\n  text = ~paste(\"Conteggio:\", count),\n  hovertemplate = \"Cilindri: %{x}&lt;br&gt;MPG medio: %{y:.1f}&lt;br&gt;%{text}&lt;br&gt;Trasmissione: %{fullData.name}&lt;extra&gt;&lt;/extra&gt;\"\n) %&gt;%\n  layout(\n    title = \"Consumo Medio per Configurazione\",\n    xaxis = list(title = \"Numero di Cilindri\"),\n    yaxis = list(title = \"MPG Medio\"),\n    barmode = \"group\"\n  )\n\np_bar\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n\n\n\nGrafico a barre interattivo con drill-down\n\n\n\n\n\n\n\nCode\n# Prepara dati per visualizzazione correlazioni forti\ncor_matrix &lt;- mtcars %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec) %&gt;%\n  cor()\n\n# Trova correlazioni forti (|r| &gt; 0.6)\ncor_long &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\") %&gt;%\n  filter(abs(correlation) &gt; 0.6, var1 != var2)\n\n# Visualizza solo correlazioni forti\nggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n  geom_tile(color = \"white\", size = 1) +\n  scale_fill_gradient2(\n    low = \"#B2182B\", mid = \"white\", high = \"#2166AC\",\n    midpoint = 0, limit = c(-1, 1),\n    name = \"Correlazione\"\n  ) +\n  geom_text(aes(label = round(correlation, 2)), size = 4, fontface = \"bold\") +\n  labs(title = \"Mappa delle Correlazioni Forti (|r| &gt; 0.6)\",\n       subtitle = \"Solo le correlazioni più significative\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.title = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nHeatmap delle correlazioni forti (alternativa a network)"
  },
  {
    "objectID": "visualizzazioni.html#visualizzazioni-specializzate-1",
    "href": "visualizzazioni.html#visualizzazioni-specializzate-1",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Code\n# Simula dati per analisi marca (estrai marca dal nome)\nmtcars_brands &lt;- mtcars_viz %&gt;%\n  mutate(\n    brand = case_when(\n      grepl(\"Merc\", car_name) ~ \"Mercedes\",\n      grepl(\"Toyota|Corolla\", car_name) ~ \"Toyota\", \n      grepl(\"Mazda\", car_name) ~ \"Mazda\",\n      grepl(\"Datsun\", car_name) ~ \"Datsun\",\n      grepl(\"Hornet|Valiant\", car_name) ~ \"Chrysler\",\n      grepl(\"Duster|Challenger\", car_name) ~ \"Plymouth\",\n      grepl(\"Camaro|Corvette\", car_name) ~ \"Chevrolet\",\n      grepl(\"Pantera\", car_name) ~ \"De Tomaso\",\n      grepl(\"Ferrari\", car_name) ~ \"Ferrari\",\n      grepl(\"Maserati\", car_name) ~ \"Maserati\",\n      grepl(\"Volvo\", car_name) ~ \"Volvo\",\n      TRUE ~ \"Altri\"\n    )\n  ) %&gt;%\n  group_by(brand) %&gt;%\n  summarise(\n    total_hp = sum(hp),\n    count = n(),\n    avg_mpg = round(mean(mpg), 1),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(total_hp))\n\n# Grafico a barre della potenza totale\nggplot(mtcars_brands, aes(x = reorder(brand, total_hp), y = total_hp, fill = avg_mpg)) +\n  geom_col(alpha = 0.8) +\n  scale_fill_viridis_c(name = \"MPG\\nMedio\") +\n  coord_flip() +\n  labs(title = \"Potenza Totale per Marca\",\n       subtitle = \"Colore rappresenta l'efficienza media (MPG)\",\n       x = \"Marca\", y = \"Potenza Totale (HP)\") +\n  theme_minimal()\n\n\n\n\n\nAnalisi della potenza per marca (simulata)\n\n\n\n\n\n\n\n\n\nCode\n# Crea subplot con plotly\nfig1 &lt;- plot_ly(mtcars_viz, x = ~wt, y = ~mpg, color = ~transmission,\n                type = \"scatter\", mode = \"markers\",\n                name = \"Scatter\") %&gt;%\n  layout(title = \"Peso vs MPG\")\n\nfig2 &lt;- plot_ly(mtcars_viz, x = ~cylinders, y = ~hp, \n                type = \"box\", name = \"Boxplot\") %&gt;%\n  layout(title = \"HP per Cilindri\")\n\nfig3 &lt;- mtcars_viz %&gt;%\n  count(efficiency_class) %&gt;%\n  plot_ly(x = ~efficiency_class, y = ~n, type = \"bar\",\n          marker = list(color = \"steelblue\")) %&gt;%\n  layout(title = \"Distribuzione Efficienza\")\n\nfig4 &lt;- plot_ly(mtcars_viz, x = ~qsec, type = \"histogram\",\n                nbinsx = 10, marker = list(color = \"lightcoral\")) %&gt;%\n  layout(title = \"Distribuzione Tempo 1/4 Miglio\")\n\n# Combina in subplot\nsubplot(fig1, fig2, fig3, fig4, \n        nrows = 2, titleX = TRUE, titleY = TRUE) %&gt;%\n  layout(title = \"Dashboard Interattiva Completa\")\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): minimal value for n is 3, returning requested palette with 3 different levels\n\n\n\n\nDashboard interattiva multifunzione"
  },
  {
    "objectID": "visualizzazioni.html#tabelle-interattive-avanzate",
    "href": "visualizzazioni.html#tabelle-interattive-avanzate",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Code\n# Crea tabella con formattazione avanzata\nmtcars_viz %&gt;%\n  select(car_name, mpg, hp, wt, cylinders, transmission, efficiency_class) %&gt;%\n  datatable(\n    caption = \"Dataset Interattivo con Formattazione Avanzata\",\n    extensions = c('Buttons', 'ColReorder'),\n    options = list(\n      dom = 'Bfrtip',\n      buttons = c('copy', 'csv', 'excel', 'pdf'),\n      pageLength = 10,\n      colReorder = TRUE,\n      columnDefs = list(\n        list(className = 'dt-center', targets = c(1,2,3,4,5,6))\n      )\n    ),\n    filter = \"top\",\n    rownames = FALSE\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1) %&gt;%\n  formatStyle(\n    \"efficiency_class\",\n    backgroundColor = styleEqual(\n      c(\"Molto Bassa\", \"Bassa\", \"Media\", \"Alta\"),\n      c(\"#d73027\", \"#fc8d59\", \"#fee08b\", \"#91cf60\")\n    )\n  ) %&gt;%\n  formatStyle(\n    \"mpg\",\n    background = styleColorBar(mtcars_viz$mpg, \"lightblue\"),\n    backgroundSize = \"100% 90%\",\n    backgroundRepeat = \"no-repeat\",\n    backgroundPosition = \"center\"\n  )"
  },
  {
    "objectID": "visualizzazioni.html#conclusioni-sulle-visualizzazioni",
    "href": "visualizzazioni.html#conclusioni-sulle-visualizzazioni",
    "title": "Visualizzazioni Avanzate e Interattive",
    "section": "",
    "text": "Quarto offre eccezionali capacità per:\n\nIntegrazione Multi-libreria: Combina ggplot2, plotly, leaflet e altre librerie seamlessly\nInterattività Nativa: Grafici interattivi senza configurazione complessa\n\nLayout Flessibili: Patchwork e subplot per dashboard complete\nEsportabilità: Tutti i grafici funzionano in HTML, PDF e altri formati\nPersonalizzazione: Controllo completo su temi e stili\n\nLa forza di Quarto sta nel rendere accessibili visualizzazioni complesse mantenendo la riproducibilità del codice."
  },
  {
    "objectID": "modelli-statistici.html",
    "href": "modelli-statistici.html",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "In questa sezione esploreremo diversi approcci di modellazione statistica utilizzando R. Vedremo come Quarto facilita la presentazione di risultati statistici complessi in modo chiaro e professionale.\n\n\n\n\nCode\n# Carica le librerie necessarie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(broom)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plotly)\nlibrary(car)\nlibrary(tibble)\n\n# Librerie opzionali con controllo\nif(require(randomForest, quietly = TRUE)) {\n  use_rf &lt;- TRUE\n} else {\n  use_rf &lt;- FALSE\n  cat(\"Nota: randomForest non disponibile\\n\")\n}\n\nif(require(caret, quietly = TRUE)) {\n  use_caret &lt;- TRUE\n} else {\n  use_caret &lt;- FALSE\n  cat(\"Nota: caret non disponibile\\n\")\n}\n\n# Prepara i dati\ndata(\"mtcars\")\nmtcars_clean &lt;- mtcars %&gt;%\n  mutate(\n    transmission = factor(ifelse(am == 1, \"Manuale\", \"Automatico\")),\n    engine_type = factor(ifelse(vs == 1, \"V-engine\", \"Straight\")),\n    car_name = rownames(mtcars)\n  )\n\n\n\n\n\n\n\n\n\nCode\n# Modello lineare semplice\nmodel_simple &lt;- lm(mpg ~ wt, data = mtcars_clean)\n\n# Riassunto del modello\nsummary(model_simple)\n\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.5432 -2.3647 -0.1252  1.4096  6.8727 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  37.2851     1.8776  19.858  &lt; 2e-16 ***\nwt           -5.3445     0.5591  -9.559 1.29e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.046 on 30 degrees of freedom\nMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7446 \nF-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10\n\n\n\n\n\n\n\nCode\n# Crea predizioni per la linea di regressione\npredictions &lt;- predict(model_simple, interval = \"confidence\")\nplot_data &lt;- cbind(mtcars_clean, predictions)\n\nggplot(plot_data, aes(x = wt, y = mpg)) +\n  geom_point(size = 3, alpha = 0.7, color = \"steelblue\") +\n  geom_line(aes(y = fit), color = \"red\", size = 1) +\n  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = \"red\") +\n  labs(title = \"Regressione Lineare: Consumo vs Peso\",\n       subtitle = paste(\"R² =\", round(summary(model_simple)$r.squared, 3)),\n       x = \"Peso (1000 lbs)\", \n       y = \"Miglia per Gallone (MPG)\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nModello di regressione lineare: MPG vs Peso\n\n\n\n\n\n\n\n\n\nCode\n# Crea grafici diagnostici\npar(mfrow = c(2, 2))\nplot(model_simple)\n\n\n\n\n\nGrafici diagnostici per il modello lineare\n\n\n\n\nCode\npar(mfrow = c(1, 1))\n\n\n\n\n\n\n\n\n\n\nCode\n# Modello con multiple variabili\nmodel_multiple &lt;- lm(mpg ~ wt + hp + cyl + transmission, data = mtcars_clean)\n\n# Riassunto del modello\nsummary(model_multiple)\n\n\n\nCall:\nlm(formula = mpg ~ wt + hp + cyl + transmission, data = mtcars_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4765 -1.8471 -0.5544  1.2758  5.6608 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         36.14654    3.10478  11.642 4.94e-12 ***\nwt                  -2.60648    0.91984  -2.834   0.0086 ** \nhp                  -0.02495    0.01365  -1.828   0.0786 .  \ncyl                 -0.74516    0.58279  -1.279   0.2119    \ntransmissionManuale  1.47805    1.44115   1.026   0.3142    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.509 on 27 degrees of freedom\nMultiple R-squared:  0.849, Adjusted R-squared:  0.8267 \nF-statistic: 37.96 on 4 and 27 DF,  p-value: 1.025e-10\n\n\n\n\n\n\n\nCode\n# Crea una tabella formattata dei coefficienti\ntidy(model_multiple, conf.int = TRUE) %&gt;%\n  mutate(\n    across(where(is.numeric), ~round(.x, 4)),\n    significance = case_when(\n      p.value &lt; 0.001 ~ \"***\",\n      p.value &lt; 0.01 ~ \"**\",\n      p.value &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"\n    )\n  ) %&gt;%\n  kable(\n    col.names = c(\"Termine\", \"Stima\", \"Errore Std\", \"t-statistic\", \n                  \"p-value\", \"CI inf\", \"CI sup\", \"Sign.\"),\n    caption = \"Coefficienti del modello con intervalli di confidenza al 95%\"\n  ) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  footnote(general = \"Significatività: *** p&lt;0.001, ** p&lt;0.01, * p&lt;0.05\")\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\n\nTable 1: Coefficienti del modello di regressione multipla\n\n\nTermine\nStima\nErrore Std\nt-statistic\np-value\nCI inf\nCI sup\nSign.\n\n\n\n\n(Intercept)\n36.1465\n3.1048\n11.6422\n0.0000\n29.7761\n42.5170\n***\n\n\nwt\n-2.6065\n0.9198\n-2.8336\n0.0086\n-4.4938\n-0.7191\n**\n\n\nhp\n-0.0250\n0.0136\n-1.8284\n0.0786\n-0.0530\n0.0030\n\n\n\ncyl\n-0.7452\n0.5828\n-1.2786\n0.2119\n-1.9409\n0.4506\n\n\n\ntransmissionManuale\n1.4780\n1.4411\n1.0256\n0.3142\n-1.4789\n4.4350\n\n\n\n\nNote: \n\n\n\n\n\n\n\n\n\n Significatività: *** p&lt;0.001, ** p&lt;0.01, * p&lt;0.05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Confronta i modelli\nanova_result &lt;- anova(model_simple, model_multiple)\n\n# Metriche di performance\nmodel_metrics &lt;- data.frame(\n  Modello = c(\"Semplice (peso)\", \"Multiplo\"),\n  R_quadrato = c(summary(model_simple)$r.squared, \n                 summary(model_multiple)$r.squared),\n  R_quadrato_adj = c(summary(model_simple)$adj.r.squared, \n                     summary(model_multiple)$adj.r.squared),\n  AIC = c(AIC(model_simple), AIC(model_multiple)),\n  RMSE = c(sqrt(mean(residuals(model_simple)^2)),\n           sqrt(mean(residuals(model_multiple)^2)))\n) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 4)))\n\nmodel_metrics %&gt;%\n  kable(caption = \"Confronto delle metriche di performance\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nConfronto delle metriche di performance\n\n\nModello\nR_quadrato\nR_quadrato_adj\nAIC\nRMSE\n\n\n\n\nSemplice (peso)\n0.7528\n0.7446\n166.0294\n2.9492\n\n\nMultiplo\n0.8490\n0.8267\n156.2536\n2.3049\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# ANOVA per il tipo di trasmissione\nanova_transmission &lt;- aov(mpg ~ transmission, data = mtcars_clean)\nsummary(anova_transmission)\n\n\n             Df Sum Sq Mean Sq F value   Pr(&gt;F)    \ntransmission  1  405.2   405.2   16.86 0.000285 ***\nResiduals    30  720.9    24.0                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\n# Test post-hoc (anche se abbiamo solo 2 gruppi)\nTukeyHSD(anova_transmission)\n\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = mpg ~ transmission, data = mtcars_clean)\n\n$transmission\n                       diff     lwr      upr    p adj\nManuale-Automatico 7.244939 3.64151 10.84837 0.000285\n\n\n\n\n\n\n\nCode\n# Calcola statistiche per il plot\nsummary_stats &lt;- mtcars_clean %&gt;%\n  group_by(transmission) %&gt;%\n  summarise(\n    mean_mpg = mean(mpg),\n    sd_mpg = sd(mpg),\n    n = n(),\n    se = sd_mpg / sqrt(n)\n  )\n\n# Test t per confronto\nt_test_result &lt;- t.test(mpg ~ transmission, data = mtcars_clean)\n\nggplot(mtcars_clean, aes(x = transmission, y = mpg, fill = transmission)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.6) +\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, \n               fill = \"white\", color = \"black\") +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"Confronto del Consumo per Tipo di Trasmissione\",\n       subtitle = paste(\"t-test p-value =\", round(t_test_result$p.value, 4)),\n       x = \"Tipo di Trasmissione\", \n       y = \"Miglia per Gallone (MPG)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\nConfronto MPG per tipo di trasmissione con test statistico\n\n\n\n\n\n\n\n\n\n\nCode\n# Prepara i dati indipendentemente dalla disponibilità delle librerie\nset.seed(123)\nn_total &lt;- nrow(mtcars_clean)\ntrain_size &lt;- floor(0.7 * n_total)\ntrain_indices &lt;- sample(seq_len(n_total), size = train_size)\n\ntrain_data &lt;- mtcars_clean[train_indices, ]\ntest_data &lt;- mtcars_clean[-train_indices, ]\n\nif(use_rf && use_caret) {\n  # Addestra Random Forest\n  rf_model &lt;- randomForest(mpg ~ wt + hp + cyl + disp + drat + qsec, \n                          data = train_data, \n                          ntree = 500,\n                          importance = TRUE)\n  \n  print(rf_model)\n  rf_available &lt;- TRUE\n} else {\n  cat(\"Random Forest non disponibile - librerie mancanti\\n\")\n  cat(\"Continuo con solo i modelli lineari\\n\")\n  rf_available &lt;- FALSE\n}\n\n\n\nCall:\n randomForest(formula = mpg ~ wt + hp + cyl + disp + drat + qsec,      data = train_data, ntree = 500, importance = TRUE) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n          Mean of squared residuals: 8.214391\n                    % Var explained: 80.65\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Estrai importanza delle variabili\n  importance_data &lt;- importance(rf_model) %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"Variable\") %&gt;%\n    arrange(desc(`%IncMSE`))\n  \n  # Plot importanza\n  ggplot(importance_data, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +\n    geom_col(fill = \"steelblue\", alpha = 0.7) +\n    coord_flip() +\n    labs(title = \"Importanza delle Variabili - Random Forest\",\n         x = \"Variabili\", \n         y = \"% Aumento MSE\") +\n    theme_minimal()\n} else {\n  cat(\"Random Forest non disponibile per analisi importanza variabili\\n\")\n}\n\n\n\n\n\nImportanza delle variabili nel modello Random Forest\n\n\n\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Predizioni sui dati di test\n  rf_predictions &lt;- predict(rf_model, test_data)\n  \n  # Calcola metriche di performance\n  performance_metrics &lt;- data.frame(\n    Metric = c(\"RMSE\", \"MAE\", \"R²\"),\n    Value = c(\n      sqrt(mean((test_data$mpg - rf_predictions)^2)),\n      mean(abs(test_data$mpg - rf_predictions)),\n      cor(test_data$mpg, rf_predictions)^2\n    )\n  ) %&gt;%\n    mutate(Value = round(Value, 4))\n  \n  performance_metrics %&gt;%\n    kable(caption = \"Metriche di performance del Random Forest sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n} else {\n  cat(\"Random Forest non disponibile per valutazione performance\\n\")\n}\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nMetriche di performance del Random Forest sui dati di test\n\n\nMetric\nValue\n\n\n\n\nRMSE\n1.9870\n\n\nMAE\n1.7715\n\n\nR²\n0.6958\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Crea dataframe per il plot\n  comparison_data &lt;- data.frame(\n    Actual = test_data$mpg,\n    Predicted = rf_predictions,\n    Car = test_data$car_name\n  )\n  \n  ggplot(comparison_data, aes(x = Actual, y = Predicted)) +\n    geom_point(size = 3, alpha = 0.7, color = \"steelblue\") +\n    geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n    labs(title = \"Predizioni vs Valori Reali - Random Forest\",\n         x = \"MPG Reale\", \n         y = \"MPG Predetto\") +\n    theme_minimal()\n} else {\n  cat(\"Random Forest non disponibile per confronto predizioni\\n\")\n}\n\n\n\n\n\nConfronto tra predizioni e valori reali\n\n\n\n\n\n\n\n\n\n\nCode\n# Predizioni del modello lineare sui dati di test (sempre disponibile)\nlm_predictions &lt;- predict(model_multiple, test_data)\n\nif(rf_available) {\n  # Confronto con Random Forest\n  final_comparison &lt;- data.frame(\n    Modello = c(\"Regressione Lineare\", \"Random Forest\"),\n    RMSE = c(\n      sqrt(mean((test_data$mpg - lm_predictions)^2)),\n      sqrt(mean((test_data$mpg - rf_predictions)^2))\n    ),\n    R_quadrato = c(\n      cor(test_data$mpg, lm_predictions)^2,\n      cor(test_data$mpg, rf_predictions)^2\n    )\n  ) %&gt;%\n    mutate(across(where(is.numeric), ~round(.x, 4)))\n  \n  final_comparison %&gt;%\n    kable(caption = \"Confronto finale delle performance sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n} else {\n  # Solo modello lineare\n  lm_performance &lt;- data.frame(\n    Modello = \"Regressione Lineare\",\n    RMSE = sqrt(mean((test_data$mpg - lm_predictions)^2)),\n    R_quadrato = cor(test_data$mpg, lm_predictions)^2\n  ) %&gt;%\n    mutate(across(where(is.numeric), ~round(.x, 4)))\n  \n  lm_performance %&gt;%\n    kable(caption = \"Performance del modello lineare sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n}\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nConfronto finale delle performance sui dati di test\n\n\nModello\nRMSE\nR_quadrato\n\n\n\n\nRegressione Lineare\n1.9619\n0.8132\n\n\nRandom Forest\n1.9870\n0.6958\n\n\n\n\n\n\n\n\n\n\nL’analisi dei modelli statistici rivela:\n\nRegressione Lineare: Il peso è il predittore più forte del consumo (R² = 0.753)\nModello Multiplo: Aggiungendo variabili miglioriamo leggermente la predizione (R² = 0.849)\nRandom Forest: Mostra performance simili ma con maggiore robustezza alle assunzioni\nVariabile Chiave: Il peso rimane il fattore più importante in tutti i modelli\n\nQuesti risultati confermano l’intuizione fisica che auto più pesanti consumano più carburante, con Quarto che permette di presentare i risultati in modo chiaro e professionale."
  },
  {
    "objectID": "modelli-statistici.html#preparazione-dei-dati",
    "href": "modelli-statistici.html#preparazione-dei-dati",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# Carica le librerie necessarie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(broom)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plotly)\nlibrary(car)\nlibrary(tibble)\n\n# Librerie opzionali con controllo\nif(require(randomForest, quietly = TRUE)) {\n  use_rf &lt;- TRUE\n} else {\n  use_rf &lt;- FALSE\n  cat(\"Nota: randomForest non disponibile\\n\")\n}\n\nif(require(caret, quietly = TRUE)) {\n  use_caret &lt;- TRUE\n} else {\n  use_caret &lt;- FALSE\n  cat(\"Nota: caret non disponibile\\n\")\n}\n\n# Prepara i dati\ndata(\"mtcars\")\nmtcars_clean &lt;- mtcars %&gt;%\n  mutate(\n    transmission = factor(ifelse(am == 1, \"Manuale\", \"Automatico\")),\n    engine_type = factor(ifelse(vs == 1, \"V-engine\", \"Straight\")),\n    car_name = rownames(mtcars)\n  )"
  },
  {
    "objectID": "modelli-statistici.html#modello-di-regressione-lineare-semplice",
    "href": "modelli-statistici.html#modello-di-regressione-lineare-semplice",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# Modello lineare semplice\nmodel_simple &lt;- lm(mpg ~ wt, data = mtcars_clean)\n\n# Riassunto del modello\nsummary(model_simple)\n\n\n\nCall:\nlm(formula = mpg ~ wt, data = mtcars_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.5432 -2.3647 -0.1252  1.4096  6.8727 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  37.2851     1.8776  19.858  &lt; 2e-16 ***\nwt           -5.3445     0.5591  -9.559 1.29e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.046 on 30 degrees of freedom\nMultiple R-squared:  0.7528,    Adjusted R-squared:  0.7446 \nF-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10\n\n\n\n\n\n\n\nCode\n# Crea predizioni per la linea di regressione\npredictions &lt;- predict(model_simple, interval = \"confidence\")\nplot_data &lt;- cbind(mtcars_clean, predictions)\n\nggplot(plot_data, aes(x = wt, y = mpg)) +\n  geom_point(size = 3, alpha = 0.7, color = \"steelblue\") +\n  geom_line(aes(y = fit), color = \"red\", size = 1) +\n  geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.2, fill = \"red\") +\n  labs(title = \"Regressione Lineare: Consumo vs Peso\",\n       subtitle = paste(\"R² =\", round(summary(model_simple)$r.squared, 3)),\n       x = \"Peso (1000 lbs)\", \n       y = \"Miglia per Gallone (MPG)\") +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nModello di regressione lineare: MPG vs Peso\n\n\n\n\n\n\n\n\n\nCode\n# Crea grafici diagnostici\npar(mfrow = c(2, 2))\nplot(model_simple)\n\n\n\n\n\nGrafici diagnostici per il modello lineare\n\n\n\n\nCode\npar(mfrow = c(1, 1))"
  },
  {
    "objectID": "modelli-statistici.html#modello-di-regressione-multipla",
    "href": "modelli-statistici.html#modello-di-regressione-multipla",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# Modello con multiple variabili\nmodel_multiple &lt;- lm(mpg ~ wt + hp + cyl + transmission, data = mtcars_clean)\n\n# Riassunto del modello\nsummary(model_multiple)\n\n\n\nCall:\nlm(formula = mpg ~ wt + hp + cyl + transmission, data = mtcars_clean)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4765 -1.8471 -0.5544  1.2758  5.6608 \n\nCoefficients:\n                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         36.14654    3.10478  11.642 4.94e-12 ***\nwt                  -2.60648    0.91984  -2.834   0.0086 ** \nhp                  -0.02495    0.01365  -1.828   0.0786 .  \ncyl                 -0.74516    0.58279  -1.279   0.2119    \ntransmissionManuale  1.47805    1.44115   1.026   0.3142    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.509 on 27 degrees of freedom\nMultiple R-squared:  0.849, Adjusted R-squared:  0.8267 \nF-statistic: 37.96 on 4 and 27 DF,  p-value: 1.025e-10\n\n\n\n\n\n\n\nCode\n# Crea una tabella formattata dei coefficienti\ntidy(model_multiple, conf.int = TRUE) %&gt;%\n  mutate(\n    across(where(is.numeric), ~round(.x, 4)),\n    significance = case_when(\n      p.value &lt; 0.001 ~ \"***\",\n      p.value &lt; 0.01 ~ \"**\",\n      p.value &lt; 0.05 ~ \"*\",\n      TRUE ~ \"\"\n    )\n  ) %&gt;%\n  kable(\n    col.names = c(\"Termine\", \"Stima\", \"Errore Std\", \"t-statistic\", \n                  \"p-value\", \"CI inf\", \"CI sup\", \"Sign.\"),\n    caption = \"Coefficienti del modello con intervalli di confidenza al 95%\"\n  ) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  footnote(general = \"Significatività: *** p&lt;0.001, ** p&lt;0.01, * p&lt;0.05\")\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\n\nTable 1: Coefficienti del modello di regressione multipla\n\n\nTermine\nStima\nErrore Std\nt-statistic\np-value\nCI inf\nCI sup\nSign.\n\n\n\n\n(Intercept)\n36.1465\n3.1048\n11.6422\n0.0000\n29.7761\n42.5170\n***\n\n\nwt\n-2.6065\n0.9198\n-2.8336\n0.0086\n-4.4938\n-0.7191\n**\n\n\nhp\n-0.0250\n0.0136\n-1.8284\n0.0786\n-0.0530\n0.0030\n\n\n\ncyl\n-0.7452\n0.5828\n-1.2786\n0.2119\n-1.9409\n0.4506\n\n\n\ntransmissionManuale\n1.4780\n1.4411\n1.0256\n0.3142\n-1.4789\n4.4350\n\n\n\n\nNote: \n\n\n\n\n\n\n\n\n\n Significatività: *** p&lt;0.001, ** p&lt;0.01, * p&lt;0.05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Confronta i modelli\nanova_result &lt;- anova(model_simple, model_multiple)\n\n# Metriche di performance\nmodel_metrics &lt;- data.frame(\n  Modello = c(\"Semplice (peso)\", \"Multiplo\"),\n  R_quadrato = c(summary(model_simple)$r.squared, \n                 summary(model_multiple)$r.squared),\n  R_quadrato_adj = c(summary(model_simple)$adj.r.squared, \n                     summary(model_multiple)$adj.r.squared),\n  AIC = c(AIC(model_simple), AIC(model_multiple)),\n  RMSE = c(sqrt(mean(residuals(model_simple)^2)),\n           sqrt(mean(residuals(model_multiple)^2)))\n) %&gt;%\n  mutate(across(where(is.numeric), ~round(.x, 4)))\n\nmodel_metrics %&gt;%\n  kable(caption = \"Confronto delle metriche di performance\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nConfronto delle metriche di performance\n\n\nModello\nR_quadrato\nR_quadrato_adj\nAIC\nRMSE\n\n\n\n\nSemplice (peso)\n0.7528\n0.7446\n166.0294\n2.9492\n\n\nMultiplo\n0.8490\n0.8267\n156.2536\n2.3049"
  },
  {
    "objectID": "modelli-statistici.html#analisi-della-varianza-anova",
    "href": "modelli-statistici.html#analisi-della-varianza-anova",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# ANOVA per il tipo di trasmissione\nanova_transmission &lt;- aov(mpg ~ transmission, data = mtcars_clean)\nsummary(anova_transmission)\n\n\n             Df Sum Sq Mean Sq F value   Pr(&gt;F)    \ntransmission  1  405.2   405.2   16.86 0.000285 ***\nResiduals    30  720.9    24.0                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\n# Test post-hoc (anche se abbiamo solo 2 gruppi)\nTukeyHSD(anova_transmission)\n\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = mpg ~ transmission, data = mtcars_clean)\n\n$transmission\n                       diff     lwr      upr    p adj\nManuale-Automatico 7.244939 3.64151 10.84837 0.000285\n\n\n\n\n\n\n\nCode\n# Calcola statistiche per il plot\nsummary_stats &lt;- mtcars_clean %&gt;%\n  group_by(transmission) %&gt;%\n  summarise(\n    mean_mpg = mean(mpg),\n    sd_mpg = sd(mpg),\n    n = n(),\n    se = sd_mpg / sqrt(n)\n  )\n\n# Test t per confronto\nt_test_result &lt;- t.test(mpg ~ transmission, data = mtcars_clean)\n\nggplot(mtcars_clean, aes(x = transmission, y = mpg, fill = transmission)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.6) +\n  stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, \n               fill = \"white\", color = \"black\") +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"Confronto del Consumo per Tipo di Trasmissione\",\n       subtitle = paste(\"t-test p-value =\", round(t_test_result$p.value, 4)),\n       x = \"Tipo di Trasmissione\", \n       y = \"Miglia per Gallone (MPG)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\n\nConfronto MPG per tipo di trasmissione con test statistico"
  },
  {
    "objectID": "modelli-statistici.html#modello-di-machine-learning-random-forest",
    "href": "modelli-statistici.html#modello-di-machine-learning-random-forest",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# Prepara i dati indipendentemente dalla disponibilità delle librerie\nset.seed(123)\nn_total &lt;- nrow(mtcars_clean)\ntrain_size &lt;- floor(0.7 * n_total)\ntrain_indices &lt;- sample(seq_len(n_total), size = train_size)\n\ntrain_data &lt;- mtcars_clean[train_indices, ]\ntest_data &lt;- mtcars_clean[-train_indices, ]\n\nif(use_rf && use_caret) {\n  # Addestra Random Forest\n  rf_model &lt;- randomForest(mpg ~ wt + hp + cyl + disp + drat + qsec, \n                          data = train_data, \n                          ntree = 500,\n                          importance = TRUE)\n  \n  print(rf_model)\n  rf_available &lt;- TRUE\n} else {\n  cat(\"Random Forest non disponibile - librerie mancanti\\n\")\n  cat(\"Continuo con solo i modelli lineari\\n\")\n  rf_available &lt;- FALSE\n}\n\n\n\nCall:\n randomForest(formula = mpg ~ wt + hp + cyl + disp + drat + qsec,      data = train_data, ntree = 500, importance = TRUE) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n          Mean of squared residuals: 8.214391\n                    % Var explained: 80.65\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Estrai importanza delle variabili\n  importance_data &lt;- importance(rf_model) %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"Variable\") %&gt;%\n    arrange(desc(`%IncMSE`))\n  \n  # Plot importanza\n  ggplot(importance_data, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +\n    geom_col(fill = \"steelblue\", alpha = 0.7) +\n    coord_flip() +\n    labs(title = \"Importanza delle Variabili - Random Forest\",\n         x = \"Variabili\", \n         y = \"% Aumento MSE\") +\n    theme_minimal()\n} else {\n  cat(\"Random Forest non disponibile per analisi importanza variabili\\n\")\n}\n\n\n\n\n\nImportanza delle variabili nel modello Random Forest\n\n\n\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Predizioni sui dati di test\n  rf_predictions &lt;- predict(rf_model, test_data)\n  \n  # Calcola metriche di performance\n  performance_metrics &lt;- data.frame(\n    Metric = c(\"RMSE\", \"MAE\", \"R²\"),\n    Value = c(\n      sqrt(mean((test_data$mpg - rf_predictions)^2)),\n      mean(abs(test_data$mpg - rf_predictions)),\n      cor(test_data$mpg, rf_predictions)^2\n    )\n  ) %&gt;%\n    mutate(Value = round(Value, 4))\n  \n  performance_metrics %&gt;%\n    kable(caption = \"Metriche di performance del Random Forest sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n} else {\n  cat(\"Random Forest non disponibile per valutazione performance\\n\")\n}\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nMetriche di performance del Random Forest sui dati di test\n\n\nMetric\nValue\n\n\n\n\nRMSE\n1.9870\n\n\nMAE\n1.7715\n\n\nR²\n0.6958\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nif(rf_available) {\n  # Crea dataframe per il plot\n  comparison_data &lt;- data.frame(\n    Actual = test_data$mpg,\n    Predicted = rf_predictions,\n    Car = test_data$car_name\n  )\n  \n  ggplot(comparison_data, aes(x = Actual, y = Predicted)) +\n    geom_point(size = 3, alpha = 0.7, color = \"steelblue\") +\n    geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = \"dashed\") +\n    labs(title = \"Predizioni vs Valori Reali - Random Forest\",\n         x = \"MPG Reale\", \n         y = \"MPG Predetto\") +\n    theme_minimal()\n} else {\n  cat(\"Random Forest non disponibile per confronto predizioni\\n\")\n}\n\n\n\n\n\nConfronto tra predizioni e valori reali"
  },
  {
    "objectID": "modelli-statistici.html#confronto-finale-dei-modelli",
    "href": "modelli-statistici.html#confronto-finale-dei-modelli",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "Code\n# Predizioni del modello lineare sui dati di test (sempre disponibile)\nlm_predictions &lt;- predict(model_multiple, test_data)\n\nif(rf_available) {\n  # Confronto con Random Forest\n  final_comparison &lt;- data.frame(\n    Modello = c(\"Regressione Lineare\", \"Random Forest\"),\n    RMSE = c(\n      sqrt(mean((test_data$mpg - lm_predictions)^2)),\n      sqrt(mean((test_data$mpg - rf_predictions)^2))\n    ),\n    R_quadrato = c(\n      cor(test_data$mpg, lm_predictions)^2,\n      cor(test_data$mpg, rf_predictions)^2\n    )\n  ) %&gt;%\n    mutate(across(where(is.numeric), ~round(.x, 4)))\n  \n  final_comparison %&gt;%\n    kable(caption = \"Confronto finale delle performance sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n} else {\n  # Solo modello lineare\n  lm_performance &lt;- data.frame(\n    Modello = \"Regressione Lineare\",\n    RMSE = sqrt(mean((test_data$mpg - lm_predictions)^2)),\n    R_quadrato = cor(test_data$mpg, lm_predictions)^2\n  ) %&gt;%\n    mutate(across(where(is.numeric), ~round(.x, 4)))\n  \n  lm_performance %&gt;%\n    kable(caption = \"Performance del modello lineare sui dati di test\") %&gt;%\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n}\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nConfronto finale delle performance sui dati di test\n\n\nModello\nRMSE\nR_quadrato\n\n\n\n\nRegressione Lineare\n1.9619\n0.8132\n\n\nRandom Forest\n1.9870\n0.6958"
  },
  {
    "objectID": "modelli-statistici.html#conclusioni",
    "href": "modelli-statistici.html#conclusioni",
    "title": "Modelli Statistici e Predittivi",
    "section": "",
    "text": "L’analisi dei modelli statistici rivela:\n\nRegressione Lineare: Il peso è il predittore più forte del consumo (R² = 0.753)\nModello Multiplo: Aggiungendo variabili miglioriamo leggermente la predizione (R² = 0.849)\nRandom Forest: Mostra performance simili ma con maggiore robustezza alle assunzioni\nVariabile Chiave: Il peso rimane il fattore più importante in tutti i modelli\n\nQuesti risultati confermano l’intuizione fisica che auto più pesanti consumano più carburante, con Quarto che permette di presentare i risultati in modo chiaro e professionale."
  },
  {
    "objectID": "analisi-esplorativa.html",
    "href": "analisi-esplorativa.html",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "L’analisi esplorativa dei dati (EDA) è un approccio fondamentale per comprendere la struttura, i pattern e le caratteristiche dei nostri dati prima di procedere con analisi più complesse.\n\n\n\n\nCode\n# Carica le librerie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyr)\nlibrary(tibble)  # Per rownames_to_column\n\n# Corrplot se disponibile\nif(require(corrplot, quietly = TRUE)) {\n  use_corrplot &lt;- TRUE\n} else {\n  use_corrplot &lt;- FALSE\n  cat(\"Nota: corrplot non disponibile, useremo ggplot per correlazioni\\n\")\n}\n\n# Imposta il tema per i grafici\ntheme_set(theme_minimal())\n\n\n\n\nCode\n# Utilizziamo il dataset mtcars integrato in R\ndata(\"mtcars\")\n\n# Aggiungiamo alcune variabili categoriche\nmtcars_extended &lt;- mtcars %&gt;%\n  mutate(\n    efficiency = case_when(\n      mpg &gt;= 25 ~ \"Alta\",\n      mpg &gt;= 20 ~ \"Media\",\n      TRUE ~ \"Bassa\"\n    ),\n    engine_type = ifelse(vs == 1, \"V-engine\", \"Straight\"),\n    transmission = ifelse(am == 1, \"Manuale\", \"Automatico\"),\n    car_name = rownames(mtcars)\n  ) %&gt;%\n  relocate(car_name, .before = mpg)\n\n# Mostra le prime righe\nhead(mtcars_extended) %&gt;%\n  kable(caption = \"Prime 6 righe del dataset mtcars esteso\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nPrime 6 righe del dataset mtcars esteso\n\n\n\ncar_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nefficiency\nengine_type\ntransmission\n\n\n\n\nMazda RX4\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMedia\nStraight\nManuale\n\n\nMazda RX4 Wag\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nMedia\nStraight\nManuale\n\n\nDatsun 710\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nMedia\nV-engine\nManuale\n\n\nHornet 4 Drive\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nMedia\nV-engine\nAutomatico\n\n\nHornet Sportabout\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nBassa\nStraight\nAutomatico\n\n\nValiant\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nBassa\nV-engine\nAutomatico\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Statistiche descrittive per le variabili numeriche\nsummary_stats &lt;- mtcars_extended %&gt;%\n  select(mpg, hp, wt, qsec, disp, drat) %&gt;%\n  summary()\n\nprint(summary_stats)\n\n\n      mpg              hp              wt             qsec      \n Min.   :10.40   Min.   : 52.0   Min.   :1.513   Min.   :14.50  \n 1st Qu.:15.43   1st Qu.: 96.5   1st Qu.:2.581   1st Qu.:16.89  \n Median :19.20   Median :123.0   Median :3.325   Median :17.71  \n Mean   :20.09   Mean   :146.7   Mean   :3.217   Mean   :17.85  \n 3rd Qu.:22.80   3rd Qu.:180.0   3rd Qu.:3.610   3rd Qu.:18.90  \n Max.   :33.90   Max.   :335.0   Max.   :5.424   Max.   :22.90  \n      disp            drat      \n Min.   : 71.1   Min.   :2.760  \n 1st Qu.:120.8   1st Qu.:3.080  \n Median :196.3   Median :3.695  \n Mean   :230.7   Mean   :3.597  \n 3rd Qu.:326.0   3rd Qu.:3.920  \n Max.   :472.0   Max.   :4.930  \n\n\n\n\n\n\n\nCode\nstats_table &lt;- mtcars_extended %&gt;%\n  select(mpg, hp, wt, qsec, disp) %&gt;%\n  summarise(\n    across(everything(), list(\n      Media = ~round(mean(.x, na.rm = TRUE), 2),\n      Mediana = ~round(median(.x, na.rm = TRUE), 2),\n      `Dev.Std` = ~round(sd(.x, na.rm = TRUE), 2),\n      Min = ~round(min(.x, na.rm = TRUE), 2),\n      Max = ~round(max(.x, na.rm = TRUE), 2)\n    ), .names = \"{.col}_{.fn}\")\n  ) %&gt;%\n  pivot_longer(everything(), names_to = \"stat\", values_to = \"value\") %&gt;%\n  separate(stat, into = c(\"variabile\", \"statistica\"), sep = \"_\") %&gt;%\n  pivot_wider(names_from = statistica, values_from = value)\n\nstats_table %&gt;%\n  kable() %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\n\nTable 1: Statistiche descrittive dettagliate\n\n\nvariabile\nMedia\nMediana\nDev.Std\nMin\nMax\n\n\n\n\nmpg\n20.09\n19.20\n6.03\n10.40\n33.90\n\n\nhp\n146.69\n123.00\n68.56\n52.00\n335.00\n\n\nwt\n3.22\n3.33\n0.98\n1.51\n5.42\n\n\nqsec\n17.85\n17.71\n1.79\n14.50\n22.90\n\n\ndisp\n230.72\n196.30\n123.94\n71.10\n472.00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Variabili da analizzare\nvars_to_plot &lt;- c(\"mpg\", \"hp\", \"wt\", \"qsec\")\n\n# Crea istogrammi separati\nfor(var in vars_to_plot) {\n  p &lt;- ggplot(mtcars_extended, aes(x = .data[[var]])) +\n    geom_histogram(bins = 10, fill = \"steelblue\", alpha = 0.7, color = \"white\") +\n    labs(title = paste(\"Distribuzione di\", var),\n         x = var, y = \"Frequenza\") +\n    theme_minimal()\n  print(p)\n}\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\n\n\nCode\nggplot(mtcars_extended, aes(x = transmission, y = mpg, fill = transmission)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"Distribuzione del Consumo per Tipo di Trasmissione\",\n       x = \"Tipo di Trasmissione\", \n       y = \"Miglia per Gallone (MPG)\",\n       fill = \"Trasmissione\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\nConfronto distribuzione MPG per tipo di trasmissione\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Seleziona variabili numeriche\nnumeric_vars &lt;- mtcars_extended %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)\n\n# Calcola correlazioni\ncor_matrix &lt;- cor(numeric_vars)\n\nif(use_corrplot) {\n  # Visualizza con corrplot se disponibile\n  corrplot(cor_matrix, method = \"color\", type = \"upper\", \n           order = \"hclust\", tl.cex = 0.8, tl.col = \"black\",\n           col = colorRampPalette(c(\"#67001F\", \"#B2182B\", \"#D6604D\", \n                                   \"#F4A582\", \"#FDDBC7\", \"#FFFFFF\", \n                                   \"#D1E5F0\", \"#92C5DE\", \"#4393C3\", \n                                   \"#2166AC\", \"#053061\"))(200))\n} else {\n  # Alternativa con ggplot\n  cor_long &lt;- cor_matrix %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"var1\") %&gt;%\n    pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\")\n  \n  ggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", \n                         midpoint = 0, name = \"Correlazione\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1),\n          axis.title = element_blank()) +\n    labs(title = \"Matrice di Correlazione\")\n}\n\n\n\n\n\nMatrice di correlazione tra le variabili numeriche\n\n\n\n\n\n\n\n\n\nCode\n# Trova le correlazioni più forti\ncor_df &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\") %&gt;%\n  filter(var1 != var2) %&gt;%\n  mutate(abs_cor = abs(correlation)) %&gt;%\n  arrange(desc(abs_cor)) %&gt;%\n  slice_head(n = 10)\n\ncor_df %&gt;%\n  select(-abs_cor) %&gt;%\n  mutate(correlation = round(correlation, 3)) %&gt;%\n  kable(caption = \"Le 10 correlazioni più forti tra le variabili\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nLe 10 correlazioni più forti tra le variabili\n\n\nvar1\nvar2\ncorrelation\n\n\n\n\ncyl\ndisp\n0.902\n\n\ndisp\ncyl\n0.902\n\n\ndisp\nwt\n0.888\n\n\nwt\ndisp\n0.888\n\n\nmpg\nwt\n-0.868\n\n\nwt\nmpg\n-0.868\n\n\nmpg\ncyl\n-0.852\n\n\ncyl\nmpg\n-0.852\n\n\nmpg\ndisp\n-0.848\n\n\ndisp\nmpg\n-0.848\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Versione semplificata del grafico interattivo\np &lt;- ggplot(mtcars_extended, aes(x = wt, y = mpg, color = transmission)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, alpha = 0.3) +\n  scale_color_brewer(type = \"qual\", palette = \"Set1\") +\n  labs(title = \"Relazione tra Peso e Consumo di Carburante\",\n       x = \"Peso (1000 lbs)\", \n       y = \"Miglia per Gallone (MPG)\",\n       color = \"Trasmissione\") +\n  theme_minimal()\n\n# Prova a renderlo interattivo, altrimenti mostra statico\ntryCatch({\n  ggplotly(p)\n}, error = function(e) {\n  print(p)\n  cat(\"Nota: Visualizzazione statica mostrata al posto di quella interattiva\\n\")\n})\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nRelazione interattiva tra peso e consumo\n\n\n\n\nNota: Visualizzazione statica mostrata al posto di quella interattiva\n\n\n\n\n\n\n\n\nCode\n# Crea una tabella interattiva con tutti i dati\nmtcars_extended %&gt;%\n  select(car_name, mpg, hp, wt, efficiency, transmission, engine_type) %&gt;%\n  datatable(\n    caption = \"Dataset completo con filtri e ricerca\",\n    options = list(\n      pageLength = 10,\n      scrollX = TRUE,\n      filter = \"top\"\n    ),\n    filter = \"top\"\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1)\n\n\n\n\n\n\n\n\n\n\nDall’analisi esplorativa emergono diversi pattern interessanti:\n\nRelazione Peso-Consumo: Esiste una forte correlazione negativa (-0.87) tra peso e consumo\nEfficienza per Trasmissione: Le auto con trasmissione manuale tendono ad essere più efficienti\nPotenza vs Efficienza: Auto più potenti tendono a consumare di più\nDistribuzione Variabili: La maggior parte delle variabili mostra distribuzioni ragionevolmente normali\n\nQuesti insight guideranno le analisi successive e la costruzione di modelli predittivi."
  },
  {
    "objectID": "analisi-esplorativa.html#preparazione-dei-dati",
    "href": "analisi-esplorativa.html#preparazione-dei-dati",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Carica le librerie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(DT)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tidyr)\nlibrary(tibble)  # Per rownames_to_column\n\n# Corrplot se disponibile\nif(require(corrplot, quietly = TRUE)) {\n  use_corrplot &lt;- TRUE\n} else {\n  use_corrplot &lt;- FALSE\n  cat(\"Nota: corrplot non disponibile, useremo ggplot per correlazioni\\n\")\n}\n\n# Imposta il tema per i grafici\ntheme_set(theme_minimal())\n\n\n\n\nCode\n# Utilizziamo il dataset mtcars integrato in R\ndata(\"mtcars\")\n\n# Aggiungiamo alcune variabili categoriche\nmtcars_extended &lt;- mtcars %&gt;%\n  mutate(\n    efficiency = case_when(\n      mpg &gt;= 25 ~ \"Alta\",\n      mpg &gt;= 20 ~ \"Media\",\n      TRUE ~ \"Bassa\"\n    ),\n    engine_type = ifelse(vs == 1, \"V-engine\", \"Straight\"),\n    transmission = ifelse(am == 1, \"Manuale\", \"Automatico\"),\n    car_name = rownames(mtcars)\n  ) %&gt;%\n  relocate(car_name, .before = mpg)\n\n# Mostra le prime righe\nhead(mtcars_extended) %&gt;%\n  kable(caption = \"Prime 6 righe del dataset mtcars esteso\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nPrime 6 righe del dataset mtcars esteso\n\n\n\ncar_name\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nefficiency\nengine_type\ntransmission\n\n\n\n\nMazda RX4\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMedia\nStraight\nManuale\n\n\nMazda RX4 Wag\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nMedia\nStraight\nManuale\n\n\nDatsun 710\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nMedia\nV-engine\nManuale\n\n\nHornet 4 Drive\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nMedia\nV-engine\nAutomatico\n\n\nHornet Sportabout\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nBassa\nStraight\nAutomatico\n\n\nValiant\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nBassa\nV-engine\nAutomatico"
  },
  {
    "objectID": "analisi-esplorativa.html#statistiche-descrittive",
    "href": "analisi-esplorativa.html#statistiche-descrittive",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Statistiche descrittive per le variabili numeriche\nsummary_stats &lt;- mtcars_extended %&gt;%\n  select(mpg, hp, wt, qsec, disp, drat) %&gt;%\n  summary()\n\nprint(summary_stats)\n\n\n      mpg              hp              wt             qsec      \n Min.   :10.40   Min.   : 52.0   Min.   :1.513   Min.   :14.50  \n 1st Qu.:15.43   1st Qu.: 96.5   1st Qu.:2.581   1st Qu.:16.89  \n Median :19.20   Median :123.0   Median :3.325   Median :17.71  \n Mean   :20.09   Mean   :146.7   Mean   :3.217   Mean   :17.85  \n 3rd Qu.:22.80   3rd Qu.:180.0   3rd Qu.:3.610   3rd Qu.:18.90  \n Max.   :33.90   Max.   :335.0   Max.   :5.424   Max.   :22.90  \n      disp            drat      \n Min.   : 71.1   Min.   :2.760  \n 1st Qu.:120.8   1st Qu.:3.080  \n Median :196.3   Median :3.695  \n Mean   :230.7   Mean   :3.597  \n 3rd Qu.:326.0   3rd Qu.:3.920  \n Max.   :472.0   Max.   :4.930  \n\n\n\n\n\n\n\nCode\nstats_table &lt;- mtcars_extended %&gt;%\n  select(mpg, hp, wt, qsec, disp) %&gt;%\n  summarise(\n    across(everything(), list(\n      Media = ~round(mean(.x, na.rm = TRUE), 2),\n      Mediana = ~round(median(.x, na.rm = TRUE), 2),\n      `Dev.Std` = ~round(sd(.x, na.rm = TRUE), 2),\n      Min = ~round(min(.x, na.rm = TRUE), 2),\n      Max = ~round(max(.x, na.rm = TRUE), 2)\n    ), .names = \"{.col}_{.fn}\")\n  ) %&gt;%\n  pivot_longer(everything(), names_to = \"stat\", values_to = \"value\") %&gt;%\n  separate(stat, into = c(\"variabile\", \"statistica\"), sep = \"_\") %&gt;%\n  pivot_wider(names_from = statistica, values_from = value)\n\nstats_table %&gt;%\n  kable() %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\n\nTable 1: Statistiche descrittive dettagliate\n\n\nvariabile\nMedia\nMediana\nDev.Std\nMin\nMax\n\n\n\n\nmpg\n20.09\n19.20\n6.03\n10.40\n33.90\n\n\nhp\n146.69\n123.00\n68.56\n52.00\n335.00\n\n\nwt\n3.22\n3.33\n0.98\n1.51\n5.42\n\n\nqsec\n17.85\n17.71\n1.79\n14.50\n22.90\n\n\ndisp\n230.72\n196.30\n123.94\n71.10\n472.00"
  },
  {
    "objectID": "analisi-esplorativa.html#distribuzione-delle-variabili",
    "href": "analisi-esplorativa.html#distribuzione-delle-variabili",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Variabili da analizzare\nvars_to_plot &lt;- c(\"mpg\", \"hp\", \"wt\", \"qsec\")\n\n# Crea istogrammi separati\nfor(var in vars_to_plot) {\n  p &lt;- ggplot(mtcars_extended, aes(x = .data[[var]])) +\n    geom_histogram(bins = 10, fill = \"steelblue\", alpha = 0.7, color = \"white\") +\n    labs(title = paste(\"Distribuzione di\", var),\n         x = var, y = \"Frequenza\") +\n    theme_minimal()\n  print(p)\n}\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\nDistribuzione delle variabili principali\n\n\n\n\n\n\n\n\n\nCode\nggplot(mtcars_extended, aes(x = transmission, y = mpg, fill = transmission)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_jitter(width = 0.2, alpha = 0.5) +\n  scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(title = \"Distribuzione del Consumo per Tipo di Trasmissione\",\n       x = \"Tipo di Trasmissione\", \n       y = \"Miglia per Gallone (MPG)\",\n       fill = \"Trasmissione\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\nConfronto distribuzione MPG per tipo di trasmissione"
  },
  {
    "objectID": "analisi-esplorativa.html#analisi-delle-correlazioni",
    "href": "analisi-esplorativa.html#analisi-delle-correlazioni",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Seleziona variabili numeriche\nnumeric_vars &lt;- mtcars_extended %&gt;%\n  select(mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)\n\n# Calcola correlazioni\ncor_matrix &lt;- cor(numeric_vars)\n\nif(use_corrplot) {\n  # Visualizza con corrplot se disponibile\n  corrplot(cor_matrix, method = \"color\", type = \"upper\", \n           order = \"hclust\", tl.cex = 0.8, tl.col = \"black\",\n           col = colorRampPalette(c(\"#67001F\", \"#B2182B\", \"#D6604D\", \n                                   \"#F4A582\", \"#FDDBC7\", \"#FFFFFF\", \n                                   \"#D1E5F0\", \"#92C5DE\", \"#4393C3\", \n                                   \"#2166AC\", \"#053061\"))(200))\n} else {\n  # Alternativa con ggplot\n  cor_long &lt;- cor_matrix %&gt;%\n    as.data.frame() %&gt;%\n    rownames_to_column(\"var1\") %&gt;%\n    pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\")\n  \n  ggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +\n    geom_tile(color = \"white\") +\n    scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", \n                         midpoint = 0, name = \"Correlazione\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1),\n          axis.title = element_blank()) +\n    labs(title = \"Matrice di Correlazione\")\n}\n\n\n\n\n\nMatrice di correlazione tra le variabili numeriche\n\n\n\n\n\n\n\n\n\nCode\n# Trova le correlazioni più forti\ncor_df &lt;- cor_matrix %&gt;%\n  as.data.frame() %&gt;%\n  rownames_to_column(\"var1\") %&gt;%\n  pivot_longer(-var1, names_to = \"var2\", values_to = \"correlation\") %&gt;%\n  filter(var1 != var2) %&gt;%\n  mutate(abs_cor = abs(correlation)) %&gt;%\n  arrange(desc(abs_cor)) %&gt;%\n  slice_head(n = 10)\n\ncor_df %&gt;%\n  select(-abs_cor) %&gt;%\n  mutate(correlation = round(correlation, 3)) %&gt;%\n  kable(caption = \"Le 10 correlazioni più forti tra le variabili\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nLe 10 correlazioni più forti tra le variabili\n\n\nvar1\nvar2\ncorrelation\n\n\n\n\ncyl\ndisp\n0.902\n\n\ndisp\ncyl\n0.902\n\n\ndisp\nwt\n0.888\n\n\nwt\ndisp\n0.888\n\n\nmpg\nwt\n-0.868\n\n\nwt\nmpg\n-0.868\n\n\nmpg\ncyl\n-0.852\n\n\ncyl\nmpg\n-0.852\n\n\nmpg\ndisp\n-0.848\n\n\ndisp\nmpg\n-0.848"
  },
  {
    "objectID": "analisi-esplorativa.html#visualizzazioni-interattive",
    "href": "analisi-esplorativa.html#visualizzazioni-interattive",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Versione semplificata del grafico interattivo\np &lt;- ggplot(mtcars_extended, aes(x = wt, y = mpg, color = transmission)) +\n  geom_point(size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, alpha = 0.3) +\n  scale_color_brewer(type = \"qual\", palette = \"Set1\") +\n  labs(title = \"Relazione tra Peso e Consumo di Carburante\",\n       x = \"Peso (1000 lbs)\", \n       y = \"Miglia per Gallone (MPG)\",\n       color = \"Trasmissione\") +\n  theme_minimal()\n\n# Prova a renderlo interattivo, altrimenti mostra statico\ntryCatch({\n  ggplotly(p)\n}, error = function(e) {\n  print(p)\n  cat(\"Nota: Visualizzazione statica mostrata al posto di quella interattiva\\n\")\n})\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nRelazione interattiva tra peso e consumo\n\n\n\n\nNota: Visualizzazione statica mostrata al posto di quella interattiva"
  },
  {
    "objectID": "analisi-esplorativa.html#tabella-interattiva-completa",
    "href": "analisi-esplorativa.html#tabella-interattiva-completa",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Code\n# Crea una tabella interattiva con tutti i dati\nmtcars_extended %&gt;%\n  select(car_name, mpg, hp, wt, efficiency, transmission, engine_type) %&gt;%\n  datatable(\n    caption = \"Dataset completo con filtri e ricerca\",\n    options = list(\n      pageLength = 10,\n      scrollX = TRUE,\n      filter = \"top\"\n    ),\n    filter = \"top\"\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1)"
  },
  {
    "objectID": "analisi-esplorativa.html#conclusioni-dellanalisi-esplorativa",
    "href": "analisi-esplorativa.html#conclusioni-dellanalisi-esplorativa",
    "title": "Analisi Esplorativa dei Dati",
    "section": "",
    "text": "Dall’analisi esplorativa emergono diversi pattern interessanti:\n\nRelazione Peso-Consumo: Esiste una forte correlazione negativa (-0.87) tra peso e consumo\nEfficienza per Trasmissione: Le auto con trasmissione manuale tendono ad essere più efficienti\nPotenza vs Efficienza: Auto più potenti tendono a consumare di più\nDistribuzione Variabili: La maggior parte delle variabili mostra distribuzioni ragionevolmente normali\n\nQuesti insight guideranno le analisi successive e la costruzione di modelli predittivi."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Questo sito web è una dimostrazione completa delle potenzialità di Quarto per l’analisi dei dati e la comunicazione scientifica. È stato creato per mostrare come Quarto permetta di integrare seamlessly codice R, risultati statistici, visualizzazioni e narrativa in un unico documento web professionale.\n\n\nQuarto è un sistema di pubblicazione tecnica e scientifica open-source che permette di:\n\n📝 Scrivere contenuti in Markdown con blocchi di codice eseguibili\n🔬 Integrare R, Python, Julia e Observable JS\n📊 Creare visualizzazioni statiche e interattive\n🌐 Pubblicare su web, PDF, Word, PowerPoint e altri formati\n🔄 Garantire riproducibilità e aggiornamenti automatici\n\n\n\n\n\n\nIntroduzione alle capacità di Quarto con esempi base di integrazione codice-risultati.\n\n\n\nDimostrazione completa di: - Statistiche descrittive automatizzate - Visualizzazioni di distribuzione - Analisi delle correlazioni - Tabelle interattive - Pattern recognition nei dati\n\n\n\nEsempi di modellazione avanzata: - Regressione lineare semplice e multipla - Analisi della varianza (ANOVA) - Machine learning con Random Forest - Confronto automatico di modelli - Diagnostica e validazione\n\n\n\nShowcase di tecniche di visualizzazione: - Grafici statici avanzati con ggplot2 - Visualizzazioni interattive con plotly - Dashboard composite con patchwork - Network e treemap specializzati - Integrazione multi-libreria\n\n\n\nEsempio di report che si adatta automaticamente: - Parametri configurabili - Contenuto condizionale - Calcoli in linea dinamici - Avvisi automatici basati sui dati - Metadati del documento\n\n\n\n\n\nQuarto: Sistema di pubblicazione principale\nR: Linguaggio di programmazione per analisi\nggplot2: Visualizzazioni statiche\nplotly: Grafici interattivi\nDT: Tabelle interattive\ndplyr: Manipolazione dati\nknitr/kableExtra: Formattazione tabelle\nVarie librerie specializzate: corrplot, randomForest, patchwork, etc.\n\n\n\n\n\n\nOgni risultato è generato dal codice, garantendo consistenza e permettendo facili aggiornamenti quando i dati cambiano.\n\n\n\nSintassi Markdown familiare con potenti estensioni per contenuti scientifici.\n\n\n\nUn singolo documento sorgente può generare siti web, PDF, presentazioni e altro.\n\n\n\nSupporto per multiple lingue di programmazione e possibilità di personalizzazione estrema.\n\n\n\nI siti generati sono automaticamente ottimizzati per desktop e mobile.\n\n\n\n\n\nData Scientists: Per condividere analisi e insight\nRicercatori: Per paper riproducibili e supplementi online\nAnalisti Business: Per report automatizzati e dashboard\nEducatori: Per materiali didattici interattivi\nConsultenti: Per deliverable professionali ai clienti\n\n\n\n\n\nInstalla Quarto: Scarica da quarto.org\nConfigura R/RStudio: Assicurati di avere R e le librerie necessarie\nClona questo progetto: Usa questo sito come template di partenza\nPersonalizza: Modifica contenuti e stile secondo le tue esigenze\nPubblica: Deploy su GitHub Pages, Netlify, o altri servizi\n\n\n\n\n\nDocumentazione Ufficiale Quarto\nGalleria di Esempi\nTutorial Video\nCommunity Forum\n\n\nQuesto sito dimostra solo una frazione delle possibilità di Quarto. La combinazione di semplicità d’uso e potenza lo rende lo strumento ideale per la comunicazione scientifica moderna."
  },
  {
    "objectID": "about.html#che-cosè-quarto",
    "href": "about.html#che-cosè-quarto",
    "title": "About",
    "section": "",
    "text": "Quarto è un sistema di pubblicazione tecnica e scientifica open-source che permette di:\n\n📝 Scrivere contenuti in Markdown con blocchi di codice eseguibili\n🔬 Integrare R, Python, Julia e Observable JS\n📊 Creare visualizzazioni statiche e interattive\n🌐 Pubblicare su web, PDF, Word, PowerPoint e altri formati\n🔄 Garantire riproducibilità e aggiornamenti automatici"
  },
  {
    "objectID": "about.html#contenuti-del-sito",
    "href": "about.html#contenuti-del-sito",
    "title": "About",
    "section": "",
    "text": "Introduzione alle capacità di Quarto con esempi base di integrazione codice-risultati.\n\n\n\nDimostrazione completa di: - Statistiche descrittive automatizzate - Visualizzazioni di distribuzione - Analisi delle correlazioni - Tabelle interattive - Pattern recognition nei dati\n\n\n\nEsempi di modellazione avanzata: - Regressione lineare semplice e multipla - Analisi della varianza (ANOVA) - Machine learning con Random Forest - Confronto automatico di modelli - Diagnostica e validazione\n\n\n\nShowcase di tecniche di visualizzazione: - Grafici statici avanzati con ggplot2 - Visualizzazioni interattive con plotly - Dashboard composite con patchwork - Network e treemap specializzati - Integrazione multi-libreria\n\n\n\nEsempio di report che si adatta automaticamente: - Parametri configurabili - Contenuto condizionale - Calcoli in linea dinamici - Avvisi automatici basati sui dati - Metadati del documento"
  },
  {
    "objectID": "about.html#tecnologie-utilizzate",
    "href": "about.html#tecnologie-utilizzate",
    "title": "About",
    "section": "",
    "text": "Quarto: Sistema di pubblicazione principale\nR: Linguaggio di programmazione per analisi\nggplot2: Visualizzazioni statiche\nplotly: Grafici interattivi\nDT: Tabelle interattive\ndplyr: Manipolazione dati\nknitr/kableExtra: Formattazione tabelle\nVarie librerie specializzate: corrplot, randomForest, patchwork, etc."
  },
  {
    "objectID": "about.html#vantaggi-di-quarto",
    "href": "about.html#vantaggi-di-quarto",
    "title": "About",
    "section": "",
    "text": "Ogni risultato è generato dal codice, garantendo consistenza e permettendo facili aggiornamenti quando i dati cambiano.\n\n\n\nSintassi Markdown familiare con potenti estensioni per contenuti scientifici.\n\n\n\nUn singolo documento sorgente può generare siti web, PDF, presentazioni e altro.\n\n\n\nSupporto per multiple lingue di programmazione e possibilità di personalizzazione estrema.\n\n\n\nI siti generati sono automaticamente ottimizzati per desktop e mobile."
  },
  {
    "objectID": "about.html#per-chi-è-utile-quarto",
    "href": "about.html#per-chi-è-utile-quarto",
    "title": "About",
    "section": "",
    "text": "Data Scientists: Per condividere analisi e insight\nRicercatori: Per paper riproducibili e supplementi online\nAnalisti Business: Per report automatizzati e dashboard\nEducatori: Per materiali didattici interattivi\nConsultenti: Per deliverable professionali ai clienti"
  },
  {
    "objectID": "about.html#come-iniziare",
    "href": "about.html#come-iniziare",
    "title": "About",
    "section": "",
    "text": "Installa Quarto: Scarica da quarto.org\nConfigura R/RStudio: Assicurati di avere R e le librerie necessarie\nClona questo progetto: Usa questo sito come template di partenza\nPersonalizza: Modifica contenuti e stile secondo le tue esigenze\nPubblica: Deploy su GitHub Pages, Netlify, o altri servizi"
  },
  {
    "objectID": "about.html#risorse-aggiuntive",
    "href": "about.html#risorse-aggiuntive",
    "title": "About",
    "section": "",
    "text": "Documentazione Ufficiale Quarto\nGalleria di Esempi\nTutorial Video\nCommunity Forum\n\n\nQuesto sito dimostra solo una frazione delle possibilità di Quarto. La combinazione di semplicità d’uso e potenza lo rende lo strumento ideale per la comunicazione scientifica moderna."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Benvenuto nel Sito di Analisi Dati con R e Quarto",
    "section": "",
    "text": "Questo sito web dimostra le potenzialità di Quarto per creare contenuti scientifici e di analisi dati integrati. Quarto è un sistema di pubblicazione tecnica e scientifica open-source costruito su Pandoc che permette di:\n\n🔬 Integrare codice, risultati e narrativa\n📊 Creare visualizzazioni interattive\n📄 Produrre documenti riproducibili\n🌐 Pubblicare facilmente su web\n\n\n\nEsplora le diverse sezioni per vedere come Quarto permette di:\n\n\nScopri come condurre analisi esplorative complete con statistiche descrittive e visualizzazioni.\n\n\n\nImpara a costruire e interpretare modelli statistici con output formattati automaticamente.\n\n\n\nCrea grafici professionali e interattivi che si integrano perfettamente nel testo.\n\n\n\nGenera report che si aggiornano automaticamente quando i dati cambiano.\n\n\n\n\nEcco un semplice esempio di come Quarto integra codice R e risultati:\n\n\nCode\n# Carica le librerie necessarie\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Crea un dataset di esempio\nset.seed(123)\ndati_esempio &lt;- data.frame(\n  x = rnorm(100),\n  y = rnorm(100),\n  categoria = sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE)\n)\n\n# Statistiche rapide\nsummary(dati_esempio)\n\n\n       x                  y            categoria        \n Min.   :-2.30917   Min.   :-2.0532   Length:100        \n 1st Qu.:-0.49385   1st Qu.:-0.8011   Class :character  \n Median : 0.06176   Median :-0.2258   Mode  :character  \n Mean   : 0.09041   Mean   :-0.1075                     \n 3rd Qu.: 0.69182   3rd Qu.: 0.4678                     \n Max.   : 2.18733   Max.   : 3.2410                     \n\n\n\n\nCode\n# Visualizzazione\nggplot(dati_esempio, aes(x = x, y = y, color = categoria)) +\n  geom_point(alpha = 0.7, size = 2) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot di Esempio\",\n       subtitle = \"Dati simulati per dimostrare l'integrazione codice-output\",\n       x = \"Variabile X\", y = \"Variabile Y\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nEsempio di grafico integrato\n\n\n\n\n\n\n\n\nRiproducibilità: Il codice e i risultati sono sempre sincronizzati\nFlessibilità: Supporta R, Python, Julia e Observable\nProfessionalità: Output di alta qualità per web, PDF, Word, e altro\nFacilità: Sintassi semplice e potenti funzionalità automatiche\n\nInizia esplorando le sezioni del menu per vedere tutte le potenzialità in azione!"
  },
  {
    "objectID": "index.html#caratteristiche-di-questo-sito",
    "href": "index.html#caratteristiche-di-questo-sito",
    "title": "Benvenuto nel Sito di Analisi Dati con R e Quarto",
    "section": "",
    "text": "Esplora le diverse sezioni per vedere come Quarto permette di:\n\n\nScopri come condurre analisi esplorative complete con statistiche descrittive e visualizzazioni.\n\n\n\nImpara a costruire e interpretare modelli statistici con output formattati automaticamente.\n\n\n\nCrea grafici professionali e interattivi che si integrano perfettamente nel testo.\n\n\n\nGenera report che si aggiornano automaticamente quando i dati cambiano."
  },
  {
    "objectID": "index.html#esempio-rapido",
    "href": "index.html#esempio-rapido",
    "title": "Benvenuto nel Sito di Analisi Dati con R e Quarto",
    "section": "",
    "text": "Ecco un semplice esempio di come Quarto integra codice R e risultati:\n\n\nCode\n# Carica le librerie necessarie\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Crea un dataset di esempio\nset.seed(123)\ndati_esempio &lt;- data.frame(\n  x = rnorm(100),\n  y = rnorm(100),\n  categoria = sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE)\n)\n\n# Statistiche rapide\nsummary(dati_esempio)\n\n\n       x                  y            categoria        \n Min.   :-2.30917   Min.   :-2.0532   Length:100        \n 1st Qu.:-0.49385   1st Qu.:-0.8011   Class :character  \n Median : 0.06176   Median :-0.2258   Mode  :character  \n Mean   : 0.09041   Mean   :-0.1075                     \n 3rd Qu.: 0.69182   3rd Qu.: 0.4678                     \n Max.   : 2.18733   Max.   : 3.2410                     \n\n\n\n\nCode\n# Visualizzazione\nggplot(dati_esempio, aes(x = x, y = y, color = categoria)) +\n  geom_point(alpha = 0.7, size = 2) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot di Esempio\",\n       subtitle = \"Dati simulati per dimostrare l'integrazione codice-output\",\n       x = \"Variabile X\", y = \"Variabile Y\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nEsempio di grafico integrato"
  },
  {
    "objectID": "index.html#perché-usare-quarto",
    "href": "index.html#perché-usare-quarto",
    "title": "Benvenuto nel Sito di Analisi Dati con R e Quarto",
    "section": "",
    "text": "Riproducibilità: Il codice e i risultati sono sempre sincronizzati\nFlessibilità: Supporta R, Python, Julia e Observable\nProfessionalità: Output di alta qualità per web, PDF, Word, e altro\nFacilità: Sintassi semplice e potenti funzionalità automatiche\n\nInizia esplorando le sezioni del menu per vedere tutte le potenzialità in azione!"
  },
  {
    "objectID": "report-dinamico.html",
    "href": "report-dinamico.html",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Questo report dimostra le capacità di Quarto di creare documenti dinamici che si adattano automaticamente ai parametri di input e ai dati. I parametri attuali sono:\n\nMPG Minimo: 15\nNumero Massimo di Cilindri: 8\n\nData di Analisi: 2024-10-24\n\n\n\n\n\nCode\n# Librerie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plotly)\nlibrary(DT)\nlibrary(lubridate)\n\n# Carica e filtra dati basandosi sui parametri\ndata(\"mtcars\")\n\n# Applica filtri dinamici\nmtcars_filtered &lt;- mtcars %&gt;%\n  filter(\n    mpg &gt;= params$min_mpg,\n    cyl &lt;= params$max_cylinders\n  ) %&gt;%\n  mutate(\n    car_name = rownames(.),\n    transmission = ifelse(am == 1, \"Manuale\", \"Automatico\"),\n    efficiency_category = case_when(\n      mpg &gt;= 25 ~ \"Molto Efficiente\",\n      mpg &gt;= 20 ~ \"Efficiente\", \n      mpg &gt;= 15 ~ \"Moderata\",\n      TRUE ~ \"Bassa Efficienza\"\n    )\n  )\n\n# Messaggio dinamico sui dati\nn_cars &lt;- nrow(mtcars_filtered)\nn_total &lt;- nrow(mtcars)\npercent_included &lt;- round(n_cars/n_total * 100, 1)\n\n\n\n\n\nCon i filtri applicati, stiamo analizzando 27 auto su 32 totali (84.4% del dataset).\n\n\n\n\n\n\n\nCode\n# Statistiche che si aggiornano automaticamente\navg_mpg &lt;- round(mean(mtcars_filtered$mpg), 2)\nmax_hp &lt;- max(mtcars_filtered$hp)\nmin_weight &lt;- round(min(mtcars_filtered$wt), 2)\nmost_common_cyl &lt;- names(sort(table(mtcars_filtered$cyl), decreasing = TRUE))[1]\n\n# Crea tabella riassuntiva\nsummary_stats &lt;- data.frame(\n  Metrica = c(\"MPG Medio\", \"Potenza Massima\", \"Peso Minimo\", \"Cilindri Più Comuni\"),\n  Valore = c(\n    paste(avg_mpg, \"mpg\"),\n    paste(max_hp, \"hp\"), \n    paste(min_weight, \"migliaia di lbs\"),\n    paste(most_common_cyl, \"cilindri\")\n  ),\n  Descrizione = c(\n    \"Consumo medio del subset filtrato\",\n    \"Auto più potente nel subset\",\n    \"Auto più leggera nel subset\", \n    \"Configurazione cilindri prevalente\"\n  )\n)\n\nkable(summary_stats, \n      caption = paste(\"Statistiche aggiornate al\", params$analysis_date)) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nStatistiche aggiornate al 2024-10-24\n\n\nMetrica\nValore\nDescrizione\n\n\n\n\nMPG Medio\n21.47 mpg\nConsumo medio del subset filtrato\n\n\nPotenza Massima\n335 hp\nAuto più potente nel subset\n\n\nPeso Minimo\n1.51 migliaia di lbs\nAuto più leggera nel subset\n\n\nCilindri Più Comuni\n4 cilindri\nConfigurazione cilindri prevalente\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Conta auto per categoria\ncategory_counts &lt;- mtcars_filtered %&gt;%\n  count(efficiency_category) %&gt;%\n  mutate(percentage = round(n/sum(n)*100, 1))\n\n# Grafico che si adatta al contenuto\nggplot(category_counts, aes(x = reorder(efficiency_category, n), y = n, fill = efficiency_category)) +\n  geom_col(alpha = 0.8, show.legend = FALSE) +\n  geom_text(aes(label = paste0(n, \" (\", percentage, \"%)\")), \n            hjust = -0.1, size = 3.5) +\n  scale_fill_viridis_d() +\n  coord_flip() +\n  labs(\n    title = \"Distribuzione per Categoria di Efficienza\",\n    subtitle = paste(\"Basato su\", n_cars, \"auto che soddisfano i criteri\"),\n    x = \"Categoria\", \n    y = \"Numero di Auto\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nDistribuzione delle 27 auto per categoria di efficienza\n\n\n\n\n\n\n\n\n\n\nCode\n# Analisi che varia a seconda dei dati disponibili\nhas_manual &lt;- any(mtcars_filtered$am == 1)\nhas_automatic &lt;- any(mtcars_filtered$am == 0)\n\nif(has_manual && has_automatic) {\n  analysis_type &lt;- \"Confronto tra trasmissioni\"\n  comparison_available &lt;- TRUE\n} else {\n  analysis_type &lt;- \"Analisi di una sola trasmissione\"\n  comparison_available &lt;- FALSE\n}\n\n\n\n\n\n\nCode\nif(comparison_available) {\n  # Se abbiamo entrambi i tipi, facciamo il confronto\n  t_test_result &lt;- t.test(mpg ~ am, data = mtcars_filtered)\n  p_value &lt;- round(t_test_result$p.value, 4)\n  \n  # Grafico di confronto\n  p &lt;- ggplot(mtcars_filtered, aes(x = transmission, y = mpg, fill = transmission)) +\n    geom_boxplot(alpha = 0.7) +\n    geom_jitter(width = 0.2, alpha = 0.6) +\n    scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n    labs(\n      title = \"Confronto MPG per Tipo di Trasmissione\",\n      subtitle = paste(\"t-test p-value =\", p_value),\n      x = \"Trasmissione\", y = \"MPG\"\n    ) +\n    theme_minimal() +\n    theme(legend.position = \"none\")\n  \n  print(p)\n  \n} else {\n  # Se abbiamo solo un tipo, mostriamo la distribuzione\n  transmission_type &lt;- ifelse(has_manual, \"manuale\", \"automatica\")\n  \n  cat(\"Nel subset filtrato sono presenti solo auto con trasmissione\", transmission_type, \".\\n\")\n  \n  # Grafico della distribuzione\n  p &lt;- ggplot(mtcars_filtered, aes(x = mpg)) +\n    geom_histogram(bins = 8, fill = \"steelblue\", alpha = 0.7, color = \"white\") +\n    geom_density(aes(y = ..density.. * n_cars * diff(range(mpg))/8), \n                color = \"red\", size = 1) +\n    labs(\n      title = paste(\"Distribuzione MPG - Trasmissione\", stringr::str_to_title(transmission_type)),\n      x = \"MPG\", y = \"Frequenza\"\n    ) +\n    theme_minimal()\n  \n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Tabella che mostra solo i dati filtrati\nmtcars_filtered %&gt;%\n  select(car_name, mpg, hp, wt, cyl, transmission, efficiency_category) %&gt;%\n  datatable(\n    caption = paste(\"Dataset filtrato -\", n_cars, \"auto selezionate\"),\n    options = list(\n      pageLength = min(10, n_cars),\n      scrollX = TRUE,\n      dom = 'Bfrtip',\n      buttons = c('copy', 'csv')\n    ),\n    extensions = 'Buttons',\n    filter = \"top\"\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1) %&gt;%\n  formatStyle(\n    \"efficiency_category\",\n    backgroundColor = styleEqual(\n      c(\"Bassa Efficienza\", \"Moderata\", \"Efficiente\", \"Molto Efficiente\"),\n      c(\"#fee5d9\", \"#fcbba1\", \"#fc9272\", \"#de2d26\")\n    )\n  )\n\n\n\n\n\n\n\n\n\n\nIl dataset filtrato presenta le seguenti caratteristiche dinamiche:\n\nL’auto più efficiente è la Toyota Corolla con 33.9 MPG\nL’auto più potente è la Maserati Bora con 335 HP\nIl peso medio è di 2.95 migliaia di lbs\nIl 48.1% delle auto ha trasmissione manuale\n\n\n\n\n\n\nCode\n# Calcola correlazione\ncorrelation &lt;- round(cor(mtcars_filtered$wt, mtcars_filtered$mpg), 3)\n\n# Modello di regressione\nmodel &lt;- lm(mpg ~ wt, data = mtcars_filtered)\nr_squared &lt;- round(summary(model)$r.squared, 3)\n\n# Grafico con statistiche dinamiche\nggplot(mtcars_filtered, aes(x = wt, y = mpg)) +\n  geom_point(aes(color = efficiency_category), size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n  scale_color_viridis_d(name = \"Efficienza\") +\n  labs(\n    title = \"Relazione Peso-Consumo (Dati Filtrati)\",\n    subtitle = paste(\"Correlazione =\", correlation, \"| R² =\", r_squared),\n    x = \"Peso (1000 lbs)\", \n    y = \"Miglia per Gallone (MPG)\"\n  ) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCorrelazione peso-consumo per 27 auto filtrate\n\n\n\n\n\n\n\n\n\nCode\n# Genera avvisi basati sui dati\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\n\n\n\n\n\n\n\nSuggerimento\n\n\n\nSono presenti 6 auto molto efficienti (≥25 MPG) nel dataset filtrato. Considerare queste per analisi di benchmark.\n\n\n\n\n\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nMetadati del Report Dinamico\n\n\nElemento\nValore\n\n\n\n\nData Generazione\n2025-10-24 15:51:32.103947\n\n\nParametri MPG\n≥ 15\n\n\nParametri Cilindri\n≤ 8\n\n\nOsservazioni Incluse\n27 su 32\n\n\nPercentuale Dataset\n84.4%\n\n\n\n\n\n\n\n\nQuesto report è stato generato automaticamente con Quarto. I parametri possono essere modificati nel YAML header per ottenere analisi diverse dello stesso dataset.\n\n\n\nPer generare una versione diversa di questo report, modifica i parametri nel YAML header:\nparams:\n  min_mpg: 20        # Cambia il filtro MPG minimo\n  max_cylinders: 6   # Cambia il numero massimo di cilindri\n  analysis_date: \"2024-01-15\"  # Cambia la data\nOppure genera il report da R con:\nquarto::quarto_render(\"report-dinamico.qmd\", \n                     execute_params = list(\n                       min_mpg = 20,\n                       max_cylinders = 6\n                     ))"
  },
  {
    "objectID": "report-dinamico.html#preparazione-dinamica-dei-dati",
    "href": "report-dinamico.html#preparazione-dinamica-dei-dati",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Librerie\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(plotly)\nlibrary(DT)\nlibrary(lubridate)\n\n# Carica e filtra dati basandosi sui parametri\ndata(\"mtcars\")\n\n# Applica filtri dinamici\nmtcars_filtered &lt;- mtcars %&gt;%\n  filter(\n    mpg &gt;= params$min_mpg,\n    cyl &lt;= params$max_cylinders\n  ) %&gt;%\n  mutate(\n    car_name = rownames(.),\n    transmission = ifelse(am == 1, \"Manuale\", \"Automatico\"),\n    efficiency_category = case_when(\n      mpg &gt;= 25 ~ \"Molto Efficiente\",\n      mpg &gt;= 20 ~ \"Efficiente\", \n      mpg &gt;= 15 ~ \"Moderata\",\n      TRUE ~ \"Bassa Efficienza\"\n    )\n  )\n\n# Messaggio dinamico sui dati\nn_cars &lt;- nrow(mtcars_filtered)\nn_total &lt;- nrow(mtcars)\npercent_included &lt;- round(n_cars/n_total * 100, 1)"
  },
  {
    "objectID": "report-dinamico.html#dati-selezionati",
    "href": "report-dinamico.html#dati-selezionati",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Con i filtri applicati, stiamo analizzando 27 auto su 32 totali (84.4% del dataset)."
  },
  {
    "objectID": "report-dinamico.html#statistiche-dinamiche",
    "href": "report-dinamico.html#statistiche-dinamiche",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Statistiche che si aggiornano automaticamente\navg_mpg &lt;- round(mean(mtcars_filtered$mpg), 2)\nmax_hp &lt;- max(mtcars_filtered$hp)\nmin_weight &lt;- round(min(mtcars_filtered$wt), 2)\nmost_common_cyl &lt;- names(sort(table(mtcars_filtered$cyl), decreasing = TRUE))[1]\n\n# Crea tabella riassuntiva\nsummary_stats &lt;- data.frame(\n  Metrica = c(\"MPG Medio\", \"Potenza Massima\", \"Peso Minimo\", \"Cilindri Più Comuni\"),\n  Valore = c(\n    paste(avg_mpg, \"mpg\"),\n    paste(max_hp, \"hp\"), \n    paste(min_weight, \"migliaia di lbs\"),\n    paste(most_common_cyl, \"cilindri\")\n  ),\n  Descrizione = c(\n    \"Consumo medio del subset filtrato\",\n    \"Auto più potente nel subset\",\n    \"Auto più leggera nel subset\", \n    \"Configurazione cilindri prevalente\"\n  )\n)\n\nkable(summary_stats, \n      caption = paste(\"Statistiche aggiornate al\", params$analysis_date)) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nStatistiche aggiornate al 2024-10-24\n\n\nMetrica\nValore\nDescrizione\n\n\n\n\nMPG Medio\n21.47 mpg\nConsumo medio del subset filtrato\n\n\nPotenza Massima\n335 hp\nAuto più potente nel subset\n\n\nPeso Minimo\n1.51 migliaia di lbs\nAuto più leggera nel subset\n\n\nCilindri Più Comuni\n4 cilindri\nConfigurazione cilindri prevalente\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Conta auto per categoria\ncategory_counts &lt;- mtcars_filtered %&gt;%\n  count(efficiency_category) %&gt;%\n  mutate(percentage = round(n/sum(n)*100, 1))\n\n# Grafico che si adatta al contenuto\nggplot(category_counts, aes(x = reorder(efficiency_category, n), y = n, fill = efficiency_category)) +\n  geom_col(alpha = 0.8, show.legend = FALSE) +\n  geom_text(aes(label = paste0(n, \" (\", percentage, \"%)\")), \n            hjust = -0.1, size = 3.5) +\n  scale_fill_viridis_d() +\n  coord_flip() +\n  labs(\n    title = \"Distribuzione per Categoria di Efficienza\",\n    subtitle = paste(\"Basato su\", n_cars, \"auto che soddisfano i criteri\"),\n    x = \"Categoria\", \n    y = \"Numero di Auto\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nDistribuzione delle 27 auto per categoria di efficienza"
  },
  {
    "objectID": "report-dinamico.html#analisi-condizionale",
    "href": "report-dinamico.html#analisi-condizionale",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Analisi che varia a seconda dei dati disponibili\nhas_manual &lt;- any(mtcars_filtered$am == 1)\nhas_automatic &lt;- any(mtcars_filtered$am == 0)\n\nif(has_manual && has_automatic) {\n  analysis_type &lt;- \"Confronto tra trasmissioni\"\n  comparison_available &lt;- TRUE\n} else {\n  analysis_type &lt;- \"Analisi di una sola trasmissione\"\n  comparison_available &lt;- FALSE\n}\n\n\n\n\n\n\nCode\nif(comparison_available) {\n  # Se abbiamo entrambi i tipi, facciamo il confronto\n  t_test_result &lt;- t.test(mpg ~ am, data = mtcars_filtered)\n  p_value &lt;- round(t_test_result$p.value, 4)\n  \n  # Grafico di confronto\n  p &lt;- ggplot(mtcars_filtered, aes(x = transmission, y = mpg, fill = transmission)) +\n    geom_boxplot(alpha = 0.7) +\n    geom_jitter(width = 0.2, alpha = 0.6) +\n    scale_fill_brewer(type = \"qual\", palette = \"Set2\") +\n    labs(\n      title = \"Confronto MPG per Tipo di Trasmissione\",\n      subtitle = paste(\"t-test p-value =\", p_value),\n      x = \"Trasmissione\", y = \"MPG\"\n    ) +\n    theme_minimal() +\n    theme(legend.position = \"none\")\n  \n  print(p)\n  \n} else {\n  # Se abbiamo solo un tipo, mostriamo la distribuzione\n  transmission_type &lt;- ifelse(has_manual, \"manuale\", \"automatica\")\n  \n  cat(\"Nel subset filtrato sono presenti solo auto con trasmissione\", transmission_type, \".\\n\")\n  \n  # Grafico della distribuzione\n  p &lt;- ggplot(mtcars_filtered, aes(x = mpg)) +\n    geom_histogram(bins = 8, fill = \"steelblue\", alpha = 0.7, color = \"white\") +\n    geom_density(aes(y = ..density.. * n_cars * diff(range(mpg))/8), \n                color = \"red\", size = 1) +\n    labs(\n      title = paste(\"Distribuzione MPG - Trasmissione\", stringr::str_to_title(transmission_type)),\n      x = \"MPG\", y = \"Frequenza\"\n    ) +\n    theme_minimal()\n  \n  print(p)\n}"
  },
  {
    "objectID": "report-dinamico.html#tabella-interattiva-filtrata",
    "href": "report-dinamico.html#tabella-interattiva-filtrata",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Tabella che mostra solo i dati filtrati\nmtcars_filtered %&gt;%\n  select(car_name, mpg, hp, wt, cyl, transmission, efficiency_category) %&gt;%\n  datatable(\n    caption = paste(\"Dataset filtrato -\", n_cars, \"auto selezionate\"),\n    options = list(\n      pageLength = min(10, n_cars),\n      scrollX = TRUE,\n      dom = 'Bfrtip',\n      buttons = c('copy', 'csv')\n    ),\n    extensions = 'Buttons',\n    filter = \"top\"\n  ) %&gt;%\n  formatRound(columns = c(\"mpg\", \"hp\", \"wt\"), digits = 1) %&gt;%\n  formatStyle(\n    \"efficiency_category\",\n    backgroundColor = styleEqual(\n      c(\"Bassa Efficienza\", \"Moderata\", \"Efficiente\", \"Molto Efficiente\"),\n      c(\"#fee5d9\", \"#fcbba1\", \"#fc9272\", \"#de2d26\")\n    )\n  )"
  },
  {
    "objectID": "report-dinamico.html#calcoli-dinamici-in-linea",
    "href": "report-dinamico.html#calcoli-dinamici-in-linea",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Il dataset filtrato presenta le seguenti caratteristiche dinamiche:\n\nL’auto più efficiente è la Toyota Corolla con 33.9 MPG\nL’auto più potente è la Maserati Bora con 335 HP\nIl peso medio è di 2.95 migliaia di lbs\nIl 48.1% delle auto ha trasmissione manuale"
  },
  {
    "objectID": "report-dinamico.html#grafico-di-correlazione-dinamico",
    "href": "report-dinamico.html#grafico-di-correlazione-dinamico",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Calcola correlazione\ncorrelation &lt;- round(cor(mtcars_filtered$wt, mtcars_filtered$mpg), 3)\n\n# Modello di regressione\nmodel &lt;- lm(mpg ~ wt, data = mtcars_filtered)\nr_squared &lt;- round(summary(model)$r.squared, 3)\n\n# Grafico con statistiche dinamiche\nggplot(mtcars_filtered, aes(x = wt, y = mpg)) +\n  geom_point(aes(color = efficiency_category), size = 3, alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n  scale_color_viridis_d(name = \"Efficienza\") +\n  labs(\n    title = \"Relazione Peso-Consumo (Dati Filtrati)\",\n    subtitle = paste(\"Correlazione =\", correlation, \"| R² =\", r_squared),\n    x = \"Peso (1000 lbs)\", \n    y = \"Miglia per Gallone (MPG)\"\n  ) +\n  theme_minimal()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCorrelazione peso-consumo per 27 auto filtrate"
  },
  {
    "objectID": "report-dinamico.html#avvisi-dinamici",
    "href": "report-dinamico.html#avvisi-dinamici",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Code\n# Genera avvisi basati sui dati\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\n\n\n\n\n\n\n\nSuggerimento\n\n\n\nSono presenti 6 auto molto efficienti (≥25 MPG) nel dataset filtrato. Considerare queste per analisi di benchmark."
  },
  {
    "objectID": "report-dinamico.html#metadati-del-report",
    "href": "report-dinamico.html#metadati-del-report",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Warning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nMetadati del Report Dinamico\n\n\nElemento\nValore\n\n\n\n\nData Generazione\n2025-10-24 15:51:32.103947\n\n\nParametri MPG\n≥ 15\n\n\nParametri Cilindri\n≤ 8\n\n\nOsservazioni Incluse\n27 su 32\n\n\nPercentuale Dataset\n84.4%\n\n\n\n\n\n\n\n\nQuesto report è stato generato automaticamente con Quarto. I parametri possono essere modificati nel YAML header per ottenere analisi diverse dello stesso dataset."
  },
  {
    "objectID": "report-dinamico.html#come-modificare-i-parametri",
    "href": "report-dinamico.html#come-modificare-i-parametri",
    "title": "Report Dinamico e Automatizzato",
    "section": "",
    "text": "Per generare una versione diversa di questo report, modifica i parametri nel YAML header:\nparams:\n  min_mpg: 20        # Cambia il filtro MPG minimo\n  max_cylinders: 6   # Cambia il numero massimo di cilindri\n  analysis_date: \"2024-01-15\"  # Cambia la data\nOppure genera il report da R con:\nquarto::quarto_render(\"report-dinamico.qmd\", \n                     execute_params = list(\n                       min_mpg = 20,\n                       max_cylinders = 6\n                     ))"
  }
]